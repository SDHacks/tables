project,link,Plain Description,Video,Website,File Url,sponsors,Mlh Points,Mlh Hardware Lab,submitter,Team Member 1 Screen Name,...,
Channel Stats,http://sdhacks2016.devpost.com/submissions/58173-channel-stats,"Displays two Twitch channels side by side, for when you wanted to watch two channels at once. Two Twitch Bots are present, one in each channel, scraping data and counting it up and performing a side-by-side data comparison of the two channels, allowing one to compare the differences in memes, popularity, and activity between different games, as well as different channels. ",,http://channelstats.herokuapp.com/,https://s3.amazonaws.com/challengepost/zip_files/production/19940/zip_files/Twitch.zip,Twitch Moderation Challenge,UC San Diego,,chenboy3,,,
HoloComm,http://sdhacks2016.devpost.com/submissions/58187-holocomm,"InspirationAs Generation 0 and Generation 1 immigrants ourselves, we all come from multilingual backgrounds.  English fluency is a critical skill for success and assimilation in our society, we wanted to use some of the most exciting trends in industry - AR and IoT - in this space for maximum impact.What it doesHoloComm is a real time translator.  Users enjoy the following features:Visual output (on Hololens) of surrounding English audio translated into user's preferred languageVisual output (on Hololens) of English text in field of view translated into user's preferred languageObject recognition and labeling in EnglishHoloComm is also able to interact with our IoT avatar, Pikachu.  The object recognition feature recognizes Pikachu as the avatar and the the user is able to initiate conversation.  Pikachu, empowered by api.ai's natural language processing framework responds in conversational English.  The entire conversation is tracked by the user using the same visual output on the Hololens as before and is transcribed to the user's email using SparkPost.  Pikachu is meant to serve as an educational aide for users to practice their English at leisure.How we built itLots of love <3 Many different technologies come into play here.  The majority of code is in C# to interface with the Hololens. connecting to hardware occurs over a Firebase database which triggers Python running on a Arduino.Challenges we ran intoStoring and processing snapshots of the visual field of Hololens to perform OCR and Object Recognition.  Currently, the images are being pushed up to imgur with Microsoft Cognitive Services analysis subsequently.Accomplishments that we're proud ofBuilding a complete user experience with rich interactivity.What we learnedHow to build a user interface in Unity for the Hololens.  How to develop natively in C# for functionality usually accomplished in Node.js.What's next for HoloCommMore features! An immediate addition is a gamified extension to object recognition which asks the user to identify certain objects with Pikachu as prompter.",https://youtu.be/NVJskx4fUmA,https://github.com/sampurnabasu/HoloComm,,"Most Entrepreneurially Promising Hack, Best Internet of Things Hack, SparkPost, 1517 fund",University of Southern California,,Sampurna,sagar7p,MakePLAN,ziran
HackFinder,http://sdhacks2016.devpost.com/submissions/58245-hackfinder,"InspirationWe go to a lot of hackathons, typically we drive but on occasion we've flown. We wanted a tool that optimized our decision making process when getting to and from hackathons. What it doesIt's a tool to streamline deciding on travel options to the lastest hackathons and optimizing your reimbursement. How we built itWe used Google's, Uber's, Lyft's and Mapbox's APIs to determine routes that are as efficient as possible.  Challenges we ran intoGetting all the APIs in synch. Accomplishments that we're proud ofWe are really proud of our design, we wanted to have a really strong UI and great UX. What we learnedWe learned how to efficiently used transitions while optimizing data transfer to the user. What's next for HackFinderAlthough we are focusing on hackathons for now, we eventually plan on expanding HackFinder into a full-fledged travel app considering the modern person's travel options (because options like Uber and Lyft aren't typically considered).",,,,"1 TB Hard Drives, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, SparkPost, 1517 fund, 1517 fund",UC Merced,,dhalili,4shub,Totalizor,jonathanmoran
C.A.R.M.,http://sdhacks2016.devpost.com/submissions/58249-c-a-r-m,"InspirationWe wanted to allow people on the same website to connect and talk with each other. There is no reason to constantly create new messaging apps and channels and such to communicate with people who are currently browsing the same page as you are (especially applies to hackathons)Take for example Discord. No one uses it, yet people have questions. Having one extension that allowed people to chat with anyone in the channel would be amazing, lightweight, and efficient.How we built itWe built an extension for Chrome using Javascript. The chat is accomplished using the MQTT protocol which holds the backend of the service. We push and pull messagesfrom this server and display them on the popup that is created when the extension is opened. We used JS, HTML, and CSS to design the functionality and look of the UI of the popup and used the material design standard.Challenges we ran intoSetting up the MQTT server took a little bit of time, and neither of us are front-end developers, so playing around with the JS took some getting used to.Accomplishments that we're proud ofCARM is fully functional on nearly every single website out there, and if we publish it to the Chrome Store, then ANYONE can start using it. It's the first app made at a hackathon that can be published nearly instantaneously after the end of the event for half our team.What we learnedWe gained a critical understanding of how to setup and work with MQTT servers to handle the storage and push/pull of messages. We also got to work more on our front-end JS, HTML, and CSS skills which is a stark change from the Java/Android frameworks that we have more experience with.What's next for CARMWe want to be able to send messages that include videos/audio. However this would require us to upgrade from the MQTT service that we are currently working with to something along the lines of Pub Nub, or more. But we accomplished what we came here for, and feel that we can continue to develop this in the future.Now anyone can Communicate Among Random Masses",,https://github.com/vanshg/CARM,https://s3.amazonaws.com/challengepost/zip_files/production/19938/zip_files/CARM.crx.zip,"1 TB Hard Drives, Hack that Best Connects Us, 1517 fund, 1517 fund",UCLA,,vanshgandhi,sahilmgandhi,,
Designated Driver,http://sdhacks2016.devpost.com/submissions/58251-designated-driver,"In the era of Big Data, we struggle to comprehend the scope of the statistics we have. We know thousands of people are killed by drunk driving, but unless someone is in that situation itäó»s impossible to really understand the psychological impact.Our SDHacks project is the solution to put a human experience to the numbers. Weäó»ve created a simulation where the viewer is literally experiencing drunk driving, vision blurred by intoxication, alcohol in hand. Using the full immersion the HTC Vive offers, viewers can watch the consequences of reckless actions, eventually ending up in a jail cell surrounded by statistics of drunk driving fatalities. Coding for Vive was challenging as itäó»s so new, especially as the camerawork of driving an erratic car required careful camera positioning. Most of our team was new to working in Unity as well, but we quickly adapted to the robust engine. We are most proud of how we were able to put so many unconnected elements together in under a day and to have them fit nearly seamlessly. Weäó»ve learned how to integrate team memberäó»s codes and unique skills together to make one cohesive project.  We plan to continue developing it, focusing on heightening the realism of the experience and offering different levels of intoxication in the simulation.Our simulation is a first step in the intermingling of VR and Data Visualization, having the experience give weight to the data and the data influencing the experience.  ",https://youtu.be/yMt_AkkTT1Y,https://github.com/nicholascrow/JEMNCDataVisualization,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, SPAWAR, Best Internet of Things Hack, 1517 fund","UC San Diego, UC Berkeley",Alienware Laptop,easonychang,awsomnick,janicez11,MelissaChien
TopTwitchText,http://sdhacks2016.devpost.com/submissions/58254-toptwitchtext,"InspirationSometimes a streamer wants the chat's opinions on whether to play one game or the other. Other times a streamer wants to know what viewers want them to do next in a game. While polling exists, this is a quicker way to get a sense of what the viewers want without calling for an explicit poll. Also, regular viewers can see what messages are dominating the chat. Kappa.What it doesUpon opening the file, you can specify which channel you wish to connect to. After connecting, you will immediately see the leaderboard for messages since you joined. You can disconnect and change channels at any time.How we built itWe used the example chatbot provided as a base and added the logic we needed for our bot.Challenges we ran intoWe spent a lot of time thinking about optimization of the algorithms we planned to use.Accomplishments that we're proud ofWe didn't actually expect to make something coming into this hackathon, so we're super excited that it is a working product :)What we learnedWe learned a lot about how Javascript works and how to weigh tradeoffs between different designs. What's next for TopTwitchTextWe want to improve on the user experience of using the bot. We also want to port this to a web app that uses Node.JS since it's currently just a static file.",https://youtu.be/ntd56P_2rnA,https://github.com/jhuang285/sdhacks_2016,,Twitch Moderation Challenge,UCSD,,jhuang285,Sokunev,,
kappapastabot,http://sdhacks2016.devpost.com/submissions/58259-kappapastabot,"kappapastabotA Twitch chat bot to send popular copy pastas when prompted with commands. Built at SD Hacks 2016.How to Use  Type [!copypasta] in Twitch chat without the brackets to have a bot output a random copypasta.  Type [!copypasta streamername] in Twitch chat to get a copypasta specific to a certain streamer.  Type [!copypasta help] in Twitch chat to get a list of streamers that are supported.CreatorsJason Baohttps://github.com/jabaoJeremiah Fanhttps://github.com/jeremiah-fan",,https://github.com/jeremiah-fan/kappapastabot,,Twitch Moderation Challenge,"UCSD, UCLA",,jeremiah-fan,jabao,,
kappapastabot,http://sdhacks2016.devpost.com/submissions/58260-kappapastabot,"kappapastabotA Twitch chat bot to send popular copy pastas when prompted with commands. Built at SD Hacks 2016.How to Use  Type [!copypasta] in Twitch chat without the brackets to have a bot output a random copypasta.  Type [!copypasta streamername] in Twitch chat to get a copypasta specific to a certain streamer.  Type [!copypasta help] in Twitch chat to get a list of streamers that are supported.CreatorsJason Baohttps://github.com/jabaoJeremiah Fanhttps://github.com/jeremiah-fan",,https://github.com/jeremiah-fan/kappapastabot,,Twitch Moderation Challenge,"UCSD, UCLA",,jabao,jeremiah-fan,,
EduBot,http://sdhacks2016.devpost.com/submissions/58280-edubot,"EduBotDecription: EduBot, the Twitch chat bot that allows you to create polls, translate sentences, look up math problems on Wolfram Alpha, and play Tic Tac Toe! Mention Trump, Hillary, or Johnson and experience a mini easter egg. Access FB/Instagram/website links through the respective commands. Say hi or hello and you will get a happy response in return. Every 5 minutes, EduBot will let you know the most frequently used words and commands.PollingWant to start a poll to see what everyone thinks about a question? With EduBot, you surely can!Type: !poll [Question ending in '?'] [AnswerChoice1] [AnswerChoice2] [AnswerChoice3] [...](Ex: !poll Who will win the presidential election? Trump Hillary Johnson)Once a poll is up and open, users can type out their answer choice in the chat to cast their vote.Type: !resultsFor the current results of the poll.Type: !killTo shut down polling for the current question.Google TranslateEver had a bot that could translate sentences for you? No? EduBot does it using Google's amazing API.Type: !translate [fromLanguage] [toLanguage] [Sentence/word to translate]Ex: !translate en fr I love Cats!Languages are named by their ""codes"", some examples are en (English), es (Spanish), and fr (French). Please visit the link below for guidance.Link: https://sites.google.com/site/tomihasa/google-language-codesWolfram AlphaEver watch a stream, talk to your friends in chat, and do your homework? With EduBot, you can do all three in one Twitch window.With the help of Wolfram Alpha's API, EduBot will help you solve your math problems, vocab questions, and physics exams with ease.Type: !wolfram [problem you want help solving]Ex: !wolfram derivative of (x^5)Social MediaObtain more information about me by using the following commands:!facebook  => Gives a link to my Facebook!instagram => Gives a link to my Instagram!website   => Gives a link to my personal websitePlay TicTacToeYou probably knew of a bot before that let you play small games, but did it let you play a full game of 3x3 Tic Tac Toe? EduBot allows this!Type: !tictactoeTo begin a new tic tac toe game. For this type of game, any type of Char can be used, not just X and O but please keep it to only two; anyone can play who is in chat.Type: !play [charToUse] [row] [col]Ex: !play X 0 0 => Places an X at the top left hand corner of the boardTo place your char at a specific row and column location. Both row and col is 0-indexed.The game will end when a player makes 3 in a row in any direction: horizontal, vertical, and both diagonals or if the game ends in a DRAW.AnnouncementsEvery 5 minutes (a minute count that is divisible by 5), EduBot will announce the top 3 most frequent words and commands used while being alive in the Twitch chat channel. This was going to be used for machine learning/AI algorithms to further interact with users, but it would've taken longer than the allotted time given for SD Hacks.DocuSignDoesn't have any functionality in this app as of right now but it is in the works. Wanted to use DocuSign for any formal agreements between Twitch chat users, most likely in the realm of tutoring services (given its name of EduBot), which I wanted to implement.Easter EggsMention Trump, Hillary, or Johnson and receive a popular quote that was said by them during this election season.Say hi or hello to EduBot and you'll receive a friendly ""Hey there!"" back. Nothing wrong with being nice. :)DevelopersLucas MarzoccoAPIs UsedGoogle Translate, Wolfram Alpha, Twitch ChatLast updated: 10/2/2016 3:38 AM",,https://github.com/lucasmarzocco/EduBot,,"Hack that Best Connects Us, Twitch Moderation Challenge",UCSD,,lucasmarzocco,,,
Phouse,http://sdhacks2016.devpost.com/submissions/58298-phouse,"Inspiration3Dconnexion SpaceMouse Pro Wireless - 3D mouse, but who wants to pay 300 dollars for such a mouse? Phouse (Phone mouse) is a lightweight alternative that gives users a unique mousing experience for free.What it doesThe phouse connects to a computer over Wi-Fi as a mouse. What separates this from many of the other Android mouses currently out there is the usage of the accelerometer integrated into Android devices as a form of mouse movement. This offers advantages over normal mouses and track pads by allowing for intuitive movement, not requiring a cable or adapter, and not requiring table space. It also provides clicking functionality and has potential to include keyboard inputs in the future. This hack also includes a 3D printed mount for the phone to give the user the same usability as expensive options such as the SpaceMouse.How I built itProgrammed in Android Studio, Eclipse, and a smartphone. Mount modeled in Autodesk Inventor Pro, 3D printed on a Fusion 3 using the Simplify3D slicerChallenges I ran intoSetting up the sockets/server/client caused a couple issues, especially since I ended up making it mostly a one-way connection. Furthermore, the use of a 3D printer made it difficult to allow the mount's ball joint to have free, accurate movement.Accomplishments that I'm proud ofIt's a pretty cool idea and really the first time I have used Android applications for anything beyond a really basic app.What I learnedFor me, it was an exploration into the realm of User Experience and Human-Computer Interaction. I definitely had a lot of fun implementing it and picked up some practical Android/Java knowledge at the same time.What's next for PhousePhouse could benefit from more features such as keyboard macros/mappings and additional screens. Also, the implementation of secondary sensors, mouse acceleration, and a high-pass filter could allow for smoother and more accurate movement.Animation of Phouse mount in actionAnimation",https://www.youtube.com/watch?v=5hvhr26a_fo,https://github.com/ThisChessPlayer/Phouse,https://s3.amazonaws.com/challengepost/zip_files/production/19900/zip_files/phouseSubmission.zip,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, Best Internet of Things Hack, Collector's Edition of Watch Dogs 2, 1517 fund",University of California: San Diego,,ThisChessPlayer,trevenmoore,,
Fit Head,http://sdhacks2016.devpost.com/submissions/58300-fit-head,"Download HereDownload the zip file here:https://drive.google.com/open?id=0Bxwkswrb4FGAYlhraFlyejU2NzQInspirationMany virtual reality games of today are controlled using limiting control schemes which only allow players to walk around or teleport using the controllers. The goal of our game was to implement a virtual reality game which would require full body movement. The result was a very entertaining fitness/score chaser game which requires full participation and immersion from the player. What it doesIt is a fitness game where you dodge incoming blocks in a virtual reality space using an HTC Vive. How we built itWe built this game using an HTC Vive and the Unity game engine. Challenges we ran intoThe biggest challenge we ran into was depicting the blocks moving at the player in such a way that anyone could perceive its motion easily. Many early testers said that they thought the blocks were directly chasing them or that they couldn't tell how close the blocks were. As such we made it so the blocks changed from green to red as they came closer. Accomplishments that we're proud ofWe are proud of creating a unique virtual reality experience which stands out greatly from other VR games due to its extensive movement controls.What we learnedWe learned how to use an HTC Vive in game development. We also sharpened our skills with co-routines in Unity. What's next for Fit HeadMore game modes, features, and a full release. We could also potentially theme our game into a specific training simulator such as for Navy aircraft carrier safety. ",https://www.youtube.com/watch?v=3NAJlBvXESc,,,SPAWAR,"University of California, Riverside",,rhale002,ksiu002,crodr027,ExtraCrispy
Megadeath Freedom Falcon Fighter III,http://sdhacks2016.devpost.com/submissions/58302-megadeath-freedom-falcon-fighter-iii,"InspirationWe all wanted to work with VR and we thought that this would be a great application for education via VR.What it doesThe user sits down in an airplane cockpit and they can point at any button/lever/dial etc. and find out what it is. They also can undertake a tutorial in which they learn how to start the plane.How I built itUses Unity and HTC Vive.Challenges I ran intoGetting the switches to pivot properly. Pivots were organized on the wrong edge when we downloaded our open source cockpit. Thanks Obama.Making the text stable. One of the hardest parts of our project were getting the user to read the text while simultaneously touching the controls.Accomplishments that I'm proud ofThis was all of our first times doing VR with Unity, so we are proud to we were able to finish a complete application. Thanks Obama.What I learnedWe learned a lot about game development and VR game design. I also learnt C# and basic game engine structure to achieve concurrent processes and rendering.What's next for MegaDeath Freedom Falcon Fighter IIIWe are thinking about implementing an interactive tutorial that lights up the buttons needed to press in order to start a plane liftoff sequence.",https://youtu.be/IgMynBnfjjg,https://github.com/Sachte/SDHacks.git,,SPAWAR,"UCSD, UC Berkeley",Samsung Gear VR,Sachte,harryho,winnielinnie,dingchenghu
StadiumBot,http://sdhacks2016.devpost.com/submissions/58303-stadiumbot,"InspirationWe wanted to create content for twitch chat that was interactive and user centric, and we thought the best way to do this would be to create a chat bot that directly interacts with members of the chat. We also wanted to emulate the atmosphere of large sporting events through our bot. Twitch streams are often E-Sport streams, and all sports deserve a little hype and crowd ineteraction! StadiumBot sets out to create a fun stadium-like environment right in the streamer's chat.What it doesStadiumBot listens and responds to chatters. It provides them with various stadium-like activities such as ordering food, performing a wave, and even being featured on a kiss-cam! This turns an ordinary stream into a chaotic arena of fans.How we built itWe build StadiumBot using node.js and a third party twitch chat API called tmi.js.Challenges we ran intoOur biggest challenge was coming up with an idea for the hackathon. Eventually, we settled on StadiumBot because it was feasible, lighthearted, and would ultimately make the twitch environment more exciting.Accomplishments that we're proud ofWe are proud of having a finished project!What we learnedWe learned a lot about the twitch platform and how chat works.What's next for StadiumBotThere are a few kinks that need to be ironed out, but the possibilities for additional features that could be added to the bot are endless.",,https://github.com/streddy/twitch-stadiumbot/,,,UCSD,,streddy,,,
NLS,http://sdhacks2016.devpost.com/submissions/58310-nls,"What it doesEncrypting a message usually leads to a ciphertext that's incomprehensible and while that's not technically problematic, it looks odd with all the special characters so it'd be easily guessable that an encrypted message is being transmitted through something like an email.NLS receives the ciphertext and outputs a natural languge text contains enough information to reconstruct the ciphertext.This way, a message has been securely encrypted (our particular implementation is AES-128) since it has a natural look, it won't be obvious that one is transmitting an encrypted message.How I built itNLS is composed of four pieces:1) Data:We used a previously downloaded English Wikipedia as base and after cleaning it up, Partially parsed it until sentences. We also had/generated a list of frequently used whole words accompanied by letters that come at the start of words or sentences.2) Lower level encrypting:For encryption we used PyCrypto to implement AES-128, ECB with block size 16 bytes.3) Numerical:We changed the base of the ciphertext (by default to 10, but can be any other base upto 26). Made a new number system to represent digits with letters of the alphabet in way to match our letter data. So eventually a ciphertext would be changed into a decimal number whose digits are the most 10 used sentence-generating/word-creating letters of the alphabet. 4) Text generation:We used our Wikipedia date to train a hidden Markov model to generate texts. Specifically, such a text must have sentences whose starting letters are consecutively the letters of our base-changed ciphertext (derived in step (3)).These steps would be reversed for decoding/decryption.Challenges I ran into1) Data-wrangling. Converting a 15G text file to another and parse it to get sentences is not pretty.2) Some weird programming problems e.g. having a defective clipboard buffer on my system that changed ""some"" texts when I pasted them, buy read it fine when I put them in a text file and read the fild instead!3) In order to prevent from having the model to learn everything, every time it's executed, we needed to export the settings. The exporting functionality of the markov library we used was both slow, required too much memory and it didn't have the form we needed. So instead of using it, we wrote the dynamic object to a binary file on the hard drive and then just reread it whenever we needed it which turned out to be faster.4) We tried to do a recurrent neural net at first, but it was simply much slower than markov for it produce anything that's comparably more natural-looking.What I learnedFirst time dealing with data wrangling, markov models and neural nets, messing around with memory in Python etc. What's next for NLSI'll publish it as open-source in the next couple of days. It has some bugs when one directly changes the threshold of allowable letters and their word production frequency that I should fix later. Encryption implementation is not ideal. It doesn't hurt for its interface to pretty, either!",,,,"HackHarassment Swag Bag, Hack that Best Connects Us, SparkPost","University of California, Santa Barbara",,aalireza,pourdavood47,,
Pebblim,http://sdhacks2016.devpost.com/submissions/58322-pebblim,"PebblimAn activity app for the Pebble Time Smartwatch. Using walking-steps, can gain increase the level of your Pebblim. Features custom drawn images and and special animation algorithms for the app. Faced interesting challenges when developing for a platform which is so restrictive on processing power and memory. Come check out our awesome 3D printed model of our very own Pebblim as well!Also, we are very excited to announce our new Domain.com provided domain name for the future landing page of our wonderful application!DomainDotComIsRad.com""Domain dot com is rad dot com"" -- Thanks Domain!!",,https://github.com/stevoleeto/SD_HACKS_2016,https://s3.amazonaws.com/challengepost/zip_files/production/19907/zip_files/SD_HACKS_2016.zip,Domain.com Swag Bags,"UCSD, UCSD, UCSD, Palomar Community College","Pebble,Pebble Time",Stephen_Gilardi,savichad,,
Swift Shift,http://sdhacks2016.devpost.com/submissions/58327-swift-shift,"InspirationFriends and family working non-constant, shift jobsWhat it doesHelps with scheduling via a mobile and web app for both employees and employers (i.e. manager)How I built itJava/Android for mobile with HTML/CSS + JS and Node.js for web + JS for leap motion/webChallenges I ran intoUsing Java client for Docusign, Node.js client turned out to be easierAccomplishments that I'm proud ofgetting a massive amount of work/code done by myselfWhat I learnedsmall things can take a while to identify and fix, you have to be able to move on from task to task quicklyWhat's next for Swift ShiftiOS app too, more features for both mobile apps...",,,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, DocuSign, 1517 fund, 1517 fund",diablo valley college,,DhanushP,,,
KappaArt,http://sdhacks2016.devpost.com/submissions/58400-kappaart,"KappaArtSDHacks 2016 SubmissionBy: Danny Diep, John Li, Michaella Sheng, David ZhangThe greatest thing about twitch is streamer to viewer interaction.KappaArt is a Twitch chat bot that encourages users to create art through contests and streamer connection. It serves to provide a way for chat to have fun creating anything from handdrawn fanart, to a photoshopped meme based on a specified topic of choice. KappaArt bot will give a certain amount of time foreach contest, specifying the rules ahead of time and then allowing for users to draw, paint, or sketch and submit their art for the moderators and further chat voting.  How does it work?The bot will hold contests and store all user submissions through parsed imgur links. Depending on the style and preference of the streamer, either they themselves or a moderator can decide what topics they would like tohave for the contestant if any. They will then set a length of time to allow chat time to create and begin the contest. Users will be able to upload theirartwork on imgur. The bot will take all posted links in chat and store them in a secure hash table until the contest is over. Afterwards mods will be able to accessthe list of users and their drawings and filter or remove any inappropriate or offensive content. From there they can crown a user the KappaArtist of the stream.Required SoftwaremIRCInstructionsNavigate to your mIRC directory.Copy the contents of the ucart folder into the mIRC folder.Run mIRC, and connect to the server. Enter a channel name with #username. This channel name should match your twitch bot account.Join that channel to begin typing commands and comments under that channel.CommandsContest!timerset Sets the contest duration in seconds.!startcontestStarts the contest with the given parameters.!stopcontestStops the current contest.!announcewinner Announces the winner of the contest for the given person's id.Topics!createtopiclistCreates a new list of topics from the external text file.!listtopicsList all topics.!selecttopic Select a topic based on the id.!selectrandomtopicSelects a random topic from the list.Contestant Data!saveSaves recent contestant data into the a text file.!loadLoads the data saved from the text file into a hash table.!resetResets the hash table that stores all the recent contest information. Use only if you want to start a new contest or if something is wrong with saving, loading, or getting contestant information.!getinfoGrabs all pooled information from a recent contest.",,https://github.com/dzhan008/sdhacks2016,,"HackHarassment Swag Bag, Hack that Best Connects Us, Twitch Moderation Challenge, 1517 fund",UC Riverside and UC San Diego,,MichaellaSheng,dzhan008,ddiep003,johnli1101
SD Queue,http://sdhacks2016.devpost.com/submissions/58407-sd-queue,"InspirationLines are the worst. People waste so much time waiting in a long line.What it doesQueue allow people to queue virtually instead of waiting in a physical line. It can also show people how much time they still need to wait and their positions in the line. When it is two people ahead, Queue will send out text message to notify users. People can also learn about the event position and the busy hours of the event so that they can make better decision. For event organizers, they can post the most updated information on Queue and promote their services to the users.How I built itChallenges I ran intoAccomplishments that I'm proud ofWhat I learnedWhat's next for SD QueueWe can occupy machine learning to predict the waiting time and queue trend to make the predicted waiting time more accurate. We can also add more social aspect so that users can interact with each other. For example, people can post their interest on it and Queue can match the interest for different people. There are also promising economic benefits in Queue.  ",,https://github.com/hd910/Line2016SDHacks,,"Most Entrepreneurially Promising Hack, 1517 fund","UCSD, UCSC",,shuaizhu2,smkurtz,yiy170,hd910
Thin Air,http://sdhacks2016.devpost.com/submissions/58408-thin-air,"InspirationThey say music is the universal language. That point hit me recently, when I saw a video about a small, poor village that was built on top of a landfill. The children of the village barely had enough to live on, let alone have instruments to play. Yet, through the ingenuity of the villagers, they made lemons out of lemonade and created functional musical instruments from trash, and in time they managed to create an orchestra with these instruments. Upon seeing this, my first thought was to how they could create the larger instruments, xylophones and drums and the like. Entering SD hacks, an easier solution came to my mind, although instruments are hard to come by and unlikely to be donated, donated smart phones could be used to create these instruments, seemingly out of thin air.What it doesThin air uses augmented reality targets that are tracked by a smart phone to simulate instruments on paper, yet maintaining some of the tactile feel of the real thing.How I built itWe used Unity and the augmented reality library Vuforia to track the image targets in real world space, and placed tracking markers on the mallets to know which notes are being struck.Challenges I ran intoWe had trouble initially with getting smaller objects (i.e. the mallets) to be tracked by the phone.Accomplishments that I'm proud ofDoing something this cool with just an iPhone camera and paper.What I learnedAugmented reality targets can be very fickle, and things such as the lighting of your station become essential. Also, you are limited by the hardware available.What's next for Thin AirImproving vision tracking and range and adding more instrument options.",,,,"Domain.com Swag Bags, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, 1517 fund, 1517 fund","UC San Diego, UC Berkley",,ThunderBagel,mathfan11235,,
Easy Flight,http://sdhacks2016.devpost.com/submissions/58423-easy-flight,"InspirationHeading to the airport in an unfamiliar territory can be daunting, so we decided to devise a solution that would help make that trip much easier!What it doesAssists people with planning their trip to their airport by taking consideration of traffic, screening time, and departure times in a friendly way!How we built itWe built it on the foundations of Docker and hosted it on Heroku. It employs Facebook's Messenger as the sole platform for interacting with the user and uses Ruby on Rails on the backend make it powerful.Challenges we ran intoHosting providers having inconsistent network quality resulted to a slow performance to the user. Ruby on Rails was an interesting framework as we quickly ran into issues with implementation and integration with APIs. Accomplishments that we're proud ofWe were able to design an app that was different in that it focused more on what the user was used to and made it more powerful. What we learnedChoosing the right framework is important as that will guide most of the project and the having the right developer's tools allows for developers to focus on development and not on setting up!What's next for Easy FlightMake it more human friendly!",,https://github.com/SDFlyHacks/EasyFlight,,,"UC San Diego, UC Berkeley",,kevinlee12,masudr,,
QuibbleMail,http://sdhacks2016.devpost.com/submissions/58424-quibblemail,"What it doesQuibbleMail lets you play games with friends and people across the world through your email!!How to play a Game of Tic Tac ToeSimply send an email to yo@yo.quibblemail.com saying""Start tick tac toe (email of other player) please""Then the player you challenged will get an email with a copy of the board, simply reply with where you want to move.ex. Top right, bottom left, center, center right pleaseHow to play a Game of ChessSimply send an email to yo@yo.quibblemail.com saying ""Start chess (email of other player) please""The challenged player will get an email with the board, reply to the email with the location of the piece you want to move and where you want to move it.Ex. A3 to A4 pleaseHow we built itWe utilize SparkPost to route emails to Firebase, from there we have a node.js server grabbing the emails from firebase, processing them, modifying the game state on firebase, and using Sparkpost to generate and send reply emails.Challenges we ran intoWe ran into some challenges setting up the DNS of our domain but with enough time we figured it out. Additionally, the chess engine we used was effectively undocumented, resulting in a disproportionate amount of time being spent on simple bugs. Accomplishments that we're proud ofManaging to create exactly what we imagined in just 48 hours. We are also proud to have created a system that can be used any where across the world. It also allows people to compete with both minimal bandwidth and any language (as long as it  is French, Spanish, Italian, Portuguese, or English.)What's next for QuibbleMailIn the future we will continue to develop QuibbleMail and add more game modes and features to connect people all over the world. We also seek to increase the number of language integrations and improve system stability and accessibility.",,https://github.com/ksbdude/SDHacks,,"Domain.com Swag Bags, Hack that Best Connects Us, SparkPost","Irvine Valley Collage, USC",,ksbdude,jzeiders,,
cardsvshumanityTwitch,http://sdhacks2016.devpost.com/submissions/58425-cardsvshumanitytwitch,"Twitch Chatbot HackathonWe are using the Twitch chatbot template to create a cards against humanity chatbotImportant linksGetting started documentation for the Twitch platform: https://dev.twitch.tv/docs Overview of the Twitch chat structure: https://dev.twitch.tv/docs/irc Twitch authentication guide (necessary for connecting to chat): https://dev.twitch.tv/docs/authenticationThe Twitch Developers forums are a great place to find existing questions and answers: https://discuss.dev.twitch.tv Structurecardschatbot.htmlProvides the user interface for the leaderboard and calls into the chatClient to connect to Twitch chat.simple-chatbot.jsProvides all of the inner workings for the chat bot including connecting, sending user credentials, and joining the correct channel. The leaderboard rendering code is also inside of this file.style.cssStyles the html document #cardsvshumanityTwitch",,https://github.com/kevinw0123/cardsvshumanityTwitch,https://s3.amazonaws.com/challengepost/zip_files/production/19930/zip_files/cardsvshumanity.zip,Twitch Moderation Challenge,University of Southern California,,wangkj,,,
Eventum,http://sdhacks2016.devpost.com/submissions/58432-eventum,"InspirationWhat it doesnfcHow we built itChallenges we ran intoAccomplishments that we're proud ofWhat we learnedWhat's next for Eventum",,https://eventum-sdhacks.herokuapp.com/,,"Hack that Best Connects Us, DocuSign, SparkPost","University of California, San Diego",,pramukhg,Bog5454,tgopal,
Trivents,http://sdhacks2016.devpost.com/submissions/58457-trivents,"The ideaWhen the four of us sat down to discuss ideas & problems that we want to solve this hackathon, there was consensus about this particular problems - knowing about events that are happening around us at a given time.Ellaborate on how we got the idea, ahanWhat is TriventsSimply put, Trivents makes events easier to manage and register for. By creating an event on Trivent, you have the option of automatically making an event on Facebook and Eventbrite based on the information you submitted on Trivent, making it a one-stop event creator with free social marketing.The other reason that makes Trivents special is it's QR code system & hassle-free registeration.Every event has it's unique generated QR code that whoever wishes to go for, can just scan it and send it to our messenger bot. The messenger bot confirms the event and in-turn takes in information such as your name and email (automatically) and specific details such as food preferences (which vary by each event). Typically this information is required at the time of registration/check-in at the event. Taking in this information, messenger replies back with a personalized QR code which can then be scanned at the event check-in (and retrieve details you put in the bot). Making this an extremely efficient event sign in. How we built itChallenges and what we learntThere were various technical challenges throughout the development project. Whether it be debugging, new modules, Google maps API and especially internal server errors, but slowly and steadily we overcame all of them, and this is something we're extremely proud of as a team. Throughout this project, all of us have learned significantly. All four of us were pushed outside our comfort zone to learn a new programming language, platform or an API. Alongside technical skills, we also learnt how to effectively collaborate as a team, ask for help and get things done.   Trivent's futureTrivents is currently focused on UC San Diego and San Diego events, but eventually we would want to expand to other colleges, cities and countries. At the moment, we're using Facebook's Messenger API for scanning QR codes and registering for events. However, in the future we want to be a completely stand-alone mobile and web application with our own QR scanning logic. Also, Trivents wants to become smarter (possibly by using machine learning methods) by understanding the user's preferences and in-turn display those events that match with the user's liking more prominently.",,,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, DocuSign","UCSD, UCLA",,AndrewGeorgeGit,asg017,arkingupta,AhanM
A Way from Home,http://sdhacks2016.devpost.com/submissions/58458-a-way-from-home,"A Way from HomeThis is an application created for the DocuSign API challenge for SDHacks - the annual hackathon of University of California, San Diego. This project is a web/mobile application written in Javascript using the popular framework Node.js, Express.js, while using MongoDB for database requirements.Credits  DocuSign  SDHacks  Major League Hacking  Node.js",,https://github.com/agustinbalquin/A-way-from-home,,"Hack that Best Connects Us, DocuSign",University of California Riverside,,agustinbalquin,,,
Let Git Go,http://sdhacks2016.devpost.com/submissions/58473-let-git-go,"InspirationI thought about what technologies will help connect people around the world and decided to tackle the difficulty for regular repositories to get noticed. So I decided to build something not only makes it easier to find people who shared similar skills and technologies without realizing and find the less-popular repositories (which are relevant), but also something that can help developers to get accustomed to the idiomatic and best practices of development so that the general quality of repositories will increase. One of the obstacles to use open source projects for me is that there aren't always clear APIs or examples. To connect components of several different projects can be tricky, if you are not very familiar with all the idioms and best practices. I wanted to build a program that makes it easier to look up projects that import a certain set of other repositories, and people who are using a certain set of technologies. I also wanted to build a idea sophistication & collaboration tool so that, once one get sa good idea of how people put different libraries together and who to collaborate with, one can go ahead and utilize the knowledge one just learned. Using this technology enables you to see repositories you would never have seen otherwise, and get to know people you would have had hard time finding.What it doessearch open source GOLANG projects that import all of given repositories (must click the automatically generated suggestion)search open source GOLANG developers who have experience using all of given repositories (not necessarily in a single project, but throughout her open source career)Provide search functions through API (/search through GET, /intersectRepo and /intersectHuman through POST)Use the search query to build a collaboration space where you can design a project which utilizes as much open source projects as possible and no one has ever built. (not implemented yet)Sends updates about who contributed to your collaboration space (by deciding to add, replace, or delete a project to/from a page) (not implemented yet)How I built itI started building from https://github.com/go-bootstrap/go-bootstrap, which helped me connect different technologies seamlessly. Golang also has a nice feature where the source code itself includes the exact address to the repositories they are importing, so it was possible to narrow down repositories by the projects they are using. Challenges I ran intoI wasn't familiar with Javascript, especially the scope of variables in Javascript. It took a long time to fix one of the most trivial bugs I've ever had.Accomplishments that I'm proud ofI was able to implement much more features than I could a year ago, in HACKUCI.What I learnedI learned about various open source projects that I used, or considered using, in my project. I learned the importance of concise, maintainable and usable APIs, and hope to be able to utilize it in the future.What's next for Let Git GoIf I could, I want to extend the application outside of the scope of Golang.",,https://www.letgitgo.com/,,"Domain.com Swag Bags, Hack that Best Connects Us","university of california, irvine",,jpatrickpark,,,
Lecture.io,http://sdhacks2016.devpost.com/submissions/58474-lecture-io,"InspirationIn UCSD iClickers are a necessity for some classes but iClickers cost around $60 and being a piece of harware, are easy to lose or misplace. We decided that there was a reason to improve and innovate in this area and What it doesWe built a replacement for iClickers that expands and improves upon the idea. Like iClickers it allows professors to create questions and get responses to those questions but it also has the capability to store the actual question text, should a professor input it. With that information, it not only becomes a tool for classroom participation but also for out of class studying as students can look back in their history and review previous clicker questions.How we built itIt was built with a front end of swift for the iOS app and a front of HTML/CSS/JS for the web portion. It's a combination of Web and iOS requiring a third party server and database. The back end server is written in Node with express as the framework and mongoDB for the database.Challenges we ran intoSome challenges we ran into were mongoDB database handling because none of us were too familiar with mongoDB so learning node's mongoose package and understanding how it's schema system worked with the actual JSONs that were stored in the database took a while. Additionallly, creating a workable and intuitive UI took a significant portion of our time as well because of the sheer amount of design decisions that went into the overall project.Accomplishments that we're proud ofWe managed to integrate an iOS app seamlessly with a third party Node server and that was really powerful because that means we can now use the same API we built for iOS processing for other device specific processing as well. Additionally, on the iOS side, we are very satisfied with the visual appeal and simplicity of the app. What we learnedWe learned, on a technical level, how to work with mongoDB and Node and create a multiplatform API for database handling. On the mobile side, we learned how to properly post JSON via http requests written in Swift.  What's next for Lecture.ioTake it to Android! Provide a professor facing mobile app. Finish the click history study tools. There's a lot to be done and if you decide to help us, we can make it happen!",,https://sdhack16.herokuapp.com/,,"Most Entrepreneurially Promising Hack, 1517 fund, 1517 fund",UCSD,,nmauskar,bennorthn,kesongxie,
budgetme,http://sdhacks2016.devpost.com/submissions/58478-budgetme,"InspirationWe develop things that we feel are lacking in our lives. Most budget apps require you to fulfill unnecessary requirements and is a hassle to fill out. Thus, we wanted to create an app that would make budgeting simple for the user.What it doesOur app takes the user's income, along with their budget and spendings in order to calculate their savings. In addition, they are able to input their ideal savings amount/goal and check if they attained this amount or not.How we built itWe used Python, Javascript, HTML 5, CSS 3, and a facial recognition API to build the app.Challenges we ran intoWe had a hard time making the facial recognition feature appear on our sign in page. We integrated a design library that we had no prior experience with, so we had to learn how to interpret the code to style our application. Also, we had a hard time with the layout of the web application. Shoutout to Nick for helping us figure out facial recognition!Accomplishments that we're proud ofWe are mainly proud of the fact that we got the facial recognition to work before the user is able to sign into their email account. As first time hackers, we had no experience with new technologies (such as virtual reality, dragonboard, and of course, facial recognition) and the fact that we accomplished this under 36 hours is quite an accomplishment.What we learnedWe learned that although a task may seem daunting at first, it becomes a lot more manageable after distributing the work among teammates. We also realized that it's important to develop incrementally in order to make sure that we know exactly what happens when we change lines of code.What's next for budgetmeWe want to be able to amp up the facial recognition feature so that it recognizes the faces of certain individuals.",,https://budgetme-145110.appspot.com/,,,"UCLA, UCI, UCSD, UCR",,hsykwon,Amy-Yee,tsandytsan,
RoboPi,http://sdhacks2016.devpost.com/submissions/58482-robopi,"InspirationAmazon Echo offers an amazing Smart Home experience but must remain stationary and limited range. RoboPi offers the same smart home features of the Echo but boasts a much better range. RoboPi is your loyal companion, following you wherever you may go, ready to help make your home more more versatile, more comfortable. Though RoboPi may appear humble, the awesome little machine offers us a glimpse of a smarter and more awesome future.What it doesRoboPi uses OpenCV to track its master. RoboPi sees and hears using a Logitech cam-corder and serves as a loyal assistant following users around the house in order to listen to Echo Commands.How we built itRoboPi is built on Raspberry Pi 3 and is enabled with a logitech webcam, a microphone, and motors. OpenCV allows RoboPi to lock onto people and follow them in order to maintain a audio range. RoboPi is equipped with Amazon Alexa and is very capable of responding to various voice commands.Challenges we ran intoThe two primary challenges of the project were implementing object tracking and also implementing Alexa. Luckily both OpenCV and Alexa have Python implementations which somewhat streamlined the build process. Calorimetric recognition required some optimization as did RoboPi's self-adjusting features, but were ultimately relatively painless to configure. The basic functionality of the Alexa API was not terribly difficult to implement, but custom Alexa Commands were rather complicated and laborious. Ultimately, we decided that further commands could be implemented in V.2.Accomplishments that we're proud ofRoboPi is a complete package with a clear purpose. He is awesome at doing is job and works very smoothly. There were a lot of moving parts in this project but ultimately the project ran smoothly. It was really powerful to know that we were able to interface all aspects of the project from the digital circuitry to the microprocessor to AWS services in our final productWhat we learnedWe had the opportunity to work with a new API, Alexa, and a new micoprocessor, Dragon410c. There was a lot of setup during the hackathon, but all work was very much worth itWhat's next for RoboPiMore commands! More functions! For the next iteration of RoboPi we would like to add a full suite of custom commands which would let us make RoboPi a truly useful IOT assistant. The ability to both observe and control any smart tech in a household is tremendous.",,https://github.com/xamgeis/RoboPi/tree/master,https://s3.amazonaws.com/challengepost/zip_files/production/19913/zip_files/RoboPi.tar.zip,"Best Use of DragonBoard, General Atomics, Best Internet of Things Hack","University of California, San Diego",Dell Monitor,YiDingFang,xamgeis,,
Buddy Download,http://sdhacks2016.devpost.com/submissions/58483-buddy-download,"InspirationSlow internet connection is frustrating. I was thinking of a way to tackle this.What it doesWhen you try to download a file. It sends a request to a server. Others devices keeping polling the server to check if there is a download request. The server partitions the file based on the internet speed these devices have and each device downloads its share.TODOAssuming that these devices come in same LAN frequently, user can instruct the application to send the file to the designated user where it will be merged.How I built itI built a Jetty server and made REST APIs so that devices can communicate with it. A device hits an API for informing the server of the URL. Server maintains a queue of such requests. Then each device informs the server of the quality of its internet connection and then server partitions the file based on this info. After each device downloads its share, it notifies the server and when all are done the request is ejected. Challenges I ran intoCommunication between client and server. I switched from sockets to polling for some part to get to a working solution.Accomplishments that I'm proud ofBuilding all these things were challenging and fun. I was able to reach the point where each device downloads its share of file. That is far ahead of what I though I'll reach.What I learnedHow to manipulate the code to synchronize actions. Establishing a system of multiple clients and a server and their communication.What's next for Buddy DownloadFirst, I'll finish it to the point I thought. Since apps have a push notification system, communication among clients and server will be much easier and convenient for the user. So, an app for it would be awesome!!",,https://github.com/gmridul/SDHack16,,"1 TB Hard Drives, Domain.com Swag Bags, Most Entrepreneurially Promising Hack",UCSD,,gmridul,,,
VR-Fight!,http://sdhacks2016.devpost.com/submissions/58486-vr-fight,"InspirationA classic throwback to the old gem Punch-Out, we aimed to combine this nostalgia of punching and being punched by the opponent with the immersive possibilities of VR. But ordinary VR is so last month, we wanted to make it Real.What it doesUses arduino circuit and HTC Vive (with Unity code) to provide a user experience never before seen. Essentially, fight against an opponent where you can parry or dodge to defend and swipe at the opponent to attack. When the opponent hits you in, for example on your left side, you feel a vibration there.How we built itIdeally we would have liked to use tiny vibration motors placed all over a jacket to provide precise and powerful vibrations all over, but we only had access to stepper motors. So we wrote random values to the stepper pins to make it behave like a vibration motor - as hacky a solution as we could come up with!We then used unity to build basic spherical ""boxing gloves"" that simulated the opponent and slowly built the design up from there - eventually creating a Julius Caesar sword-fighting game in the middle of a forest!Challenges we ran intoSetup. Unity was a rather large hurdle to overcome as a framework, especially the design. Also, audio sources were difficult to deal with, as it seemed to have been decreasing our runtime and affecting the gameplay. We also had a pre-existing model of a boxer that would've been really cool to use, but animations were very difficult to handle with that model. Getting the steppers to behave as vibration motors was also tricky.Accomplishments that we're proud ofGetting all of it to work! Fighting with a Caesar we made was an extremely rewarding experience! And the haptic feedback on the body and through the controllers definitely add to the experience.nWhat we learnedUnity. VR. ViveWhat's next for VR-Fight!VR-Fight is a small-scale proof of concept of a much larger idea - integrating real life experiences into VR Games. For example when its windy, a fan turns on so you actually feel windy. Water can be sprayed on you when it rains in the game. VR-Fight was the simplest version of this idea we could make with the tools available to us at the hackathon and in this time-frame.",https://www.youtube.com/watch?v=D4N5TiSzkVs,https://github.com/HaarisKhan/VR-Fight,,"HackHarassment Swag Bag, 1 TB Hard Drives, Domain.com Swag Bags, Hack that Best Connects Us, Best Use of DragonBoard, Most Entrepreneurially Promising Hack, DocuSign, SPAWAR, General Atomics, Best Internet of Things Hack, SparkPost, 1517 fund, Twitch Moderation Challenge, Collector's Edition of Watch Dogs 2, 1517 fund",UC Berkeley,Arduino 101,P1N_Team,raghav98,,
Homcook,http://sdhacks2016.devpost.com/submissions/58493-homcook,"InspirationBeing college students away from home and wanting something more than cafeteria foods.What it doesHomcook brings people who want a home-cooked meal and people who cook extra portions together. Whether it be a pick up, delivery, or a dine in, Homcook will help you set it up. How we built itWe built the app on android studio and used Firebase to support the backend. Challenges we ran intoBeing new to android studio we mainly ran into errors around outdated API versions and  Accomplishments that we're proud ofLearning how to use android studio and collaborating with a newly found team.What we learnedWe learned how to use android studio and how to use Firebase.What's next for HomcookWe hope to fulfill our mission of bringing together food lovers. ",,https://github.com/jabumeri/Homcook,https://s3.amazonaws.com/challengepost/zip_files/production/19914/zip_files/MainActivity.java,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, DocuSign","Cal Poly Pomona, UC Irvine, Cal State Fullerton",,tchaw,Elopezsolis,arodd94,jabumeri
Cooking With Alexa,http://sdhacks2016.devpost.com/submissions/58510-cooking-with-alexa,"InspirationOften times when cooking we run into the problem of getting our laptops or phones dirty pulling up the recipe to check the directions. This can be incredibly harmful to our devices but often a required risk if we want to ensure our food comes out properly. What it doesAllows the user to upload a recipe from allrecipes.com and have Alexa read the ingredients and directions with ease!How we built itUsing Amazon Developer for Alexa running node.js on a heroku server with a ruby on rails web interface. Challenges we ran intoHaving incredibly limited Ruby experience, and no experience in Rails greatly limited efficiency of production. There was computer error too which prevented the further development of the program which would take in user input. Figuring out how to program custom functions onto Alexa was a challenge as Amazon does not have much documentation outside of their AWS lambda functions. Wanting to use something we were more familiar with, like node.js, made our project a bit harder to get started but easier in the long run.Accomplishments that we're proud ofGetting Alexa to talk with us! Also figuring out node.js and heroku despite having minimal prior experience with the two. What we learnedRuby/Rails, Node.js, heroku, Alexa DevelopmentWhat's next for Cooking With AlexaImplementing the Ruby functionality in order to receive user input. Finishing up the commands to make them less buggy (Not being able to understand non-seeded ingredient names, Problems with Echo's security settings at 8 secodns, etc.)",,https://github.com/HalcyonAura/CookingWithAlexa,https://s3.amazonaws.com/challengepost/zip_files/production/19922/zip_files/CookingWithAlexa-master.zip,Best Internet of Things Hack,Arizona State University,Amazon Echo,claplace,Giansar,,
The information of myself the Website!,http://sdhacks2016.devpost.com/submissions/58517-the-information-of-myself-the-website,"Home PageMy personal home page source code",,https://github.com/youhusky/youhusky.github.io,,Domain.com Swag Bags,University of Southern California,,youhusky,,,
Scriply,http://sdhacks2016.devpost.com/submissions/58520-scriply,"Keeping track of meds is hard. In the U.S., there is a markedly low adherence to refilling and taking prescriptions; in fact, nearly 50% of people taking a chronic medication stop taking it within the first year, with the biggest drop-off occurring in the first month. Additionally, prescription drugs are highly susceptible to abuse by non-prescribed users who have access to the medication, with 52 million people reporting that they have used prescription drugs for nonmedical reasons at least once in their lifetimes. Finally, many people manage prescriptions for others, namely elderly people and people with impaired memory. Ensuring that the other person has taken the correct dosage every day can be a major challenge.Scriply is combatting the biggest issues related to prescription drugs by allowing users full insight and control over their prescription regimens through an intuitive app and multi-user dispenser.How it worksThe Scriply app allows its user to set the weekly medication regimen for themselves and any other individuals in their care. Based on this information, the dispenser will combine and release the formulation of pills that individuals needs on demand. Data on dispenses is then sent to the app for the user to be able to monitor activity.The system is designed to make prescription management seamless and intuitive by integrating additional features such as optional reminders, notifications when prescriptions need to be refilled, and the ability to order prescription refills in-app.This competes with similar products on the market because current offerings require users to physically input every drug combination for every dispense, can't dispense liquid medication, don't allow for activity monitoring, only serve one individual per machine, don't allow for freedom in reminders, and, quite frankly, aren't very visually appealing. Scriply addresses all of these issues, and does so on a clean, user-friendly interface.How we built itUnderstanding that managing prescriptions is nobody's favorite pastime, Scriply's system was designed to require as few interactions as possible while relaying an extremely high level of actionable information to the user. Accordingly, we designed our iOS app to be straightforward, bright, and intuitive. This app connects directly to the dispenser, and can prompt the dispenser to release any combination of pills on demand.The dispenser can release two types of medication: pills and liquid medicine. It functions by rotating juxtaposed disks that select and accept a single serving of meds and dispenses them down a shoot. The majority of its components were 3D printed using CAD. Our team built the underlying mechanics on Arduino and subsequently developed a platform to connect the Arduino system to a Node.js server.Challenges we ran intoThe biggest technical challenge that we faced was that the 3D printing process took longer than we had anticipated, which caused us to have to readjust our design schedule on multiple occasions. The team concluded that had the designs been more space-efficient, much printing time could have been saved.A second major challenge arose from developing the app's logic. Because prescription drug management conflates an array of different factors, our team put much more time than we had expected we would into theorizing on the different scenarios and possible troubleshooting issues that might arise for the user, and continuously found ourselves confronted with holes in the experience that needed to be patched up.Accomplishments that we're proud ofOverall, our team managed to create a viable proof of concept for a product that could facilitate the lives of many individuals who deal with difficulties related to prescription drugs. The system integrated both software and hardware to perform a task that is relatively nuanced for what can be built in 36 hours, and the team learned much in doing so.What we learnedThe multi-faceted nature of this project allowed our team to gain exposure to a wide range of problem-solving opportunities. Firstly, this project was an exercise in teamwork wherein every member of our team was made to contribute their expertise to an overarching concept. This meant that we had to harmonize our skillsets and abilities, and determine how any lapses in knowledge would be addressedäóñ sometimes this meant having to rapidly learn a new technical skill, and others it meant overcoming a fear of talking to strangers. Secondly, this project was this team's first full immersion into design thinking. We attempted to address every problem we encountered with a user-centric answer, employing our sense of empathy with the end user. Finally, we were able to garner a deeper sense of issues related to prescription medication use. These issues aren't very visible in society, but many individuals struggle with at least one of the problems that we identified, and we believe that were made much more cognizant for it.What's next for ScriplyDue to the time constraint, the app and dispenser were built to the point of proof of concept, but not to their full functionality. As we Scriply moves forward, we are aiming to build out the app's back-end to meet its current front-end framework, incorporating a prescription database for users to have a menu of drugs to choose from and embedding the prescription refill feature, as well as refine the dispenser's physical design to be more aesthetically appealing to match the user experience on the app.Personally, we will continue to further our awareness into issues stemming from prescription medications and seek out innovative and integrated solutions.",,,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, General Atomics, Best Internet of Things Hack, 1517 fund, 1517 fund","UC San Diego, UC Merced, UC Santa Cruz",Arduino 101,sophievo,Jacrin,hoaithidang,chrisryanreps
PilBot,http://sdhacks2016.devpost.com/submissions/58521-pilbot,"Team Name: Sac(k)PilBot: Your Daily Dose====================## InspirationWe wanted to connect top gaming news directly to the relevant game stream to enhance the Twitch.tv experience. We also wanted to make a fun Twitch.tv chat bot that provides quality content :)## What it doesOur twitch chat bot broadcasts hot, relevant topics from sub-Reddit of the game that the streamer is playing.## How we built itPython and determination.## Challenges we ran intoTwitch.tv blocking all of SDHacks IPs, so we could not send chat messages to channels.SDHacks internet being really slow.Learning Python syntax and connecting to the Twitch.tv socket.Learning how to use Twitch.tv's chat bot API in order to get the streamer's game and also to send and receive messages to the chat.Learning how to use PRAW (Python Reddit API Wrapper) for searching the streamer's game subreddit and getting the threads.## Accomplishments that we're proud ofWe made something that works the way its supposed to :)We also installed pip and praw.## What we learnedWe learned Python, how to connect to a socket, how to install and use APIs, how to access JSON objects, how irc works.## What's next for PilBotFun and chat interactive emoticon clouds (like word cloud, but with pictures)User chat commands (such as !poll and !songs)",,https://github.com/Leest1/TwitchBot,https://s3.amazonaws.com/challengepost/zip_files/production/19919/zip_files/PilBot.zip,Twitch Moderation Challenge,"UC Irvine, UC San Diego",,shannyonl,lewchristoph,williamma64,
Castifi,http://sdhacks2016.devpost.com/submissions/58522-castifi,"InspirationThis is inspirationWhat it doesHow we built itChallenges we ran intoAccomplishments that we're proud ofWhat we learnedWhat's next for Castifi",,http://app.castifi.com,,"1 TB Hard Drives, Domain.com Swag Bags, Most Entrepreneurially Promising Hack, DocuSign, 1517 fund, Collector's Edition of Watch Dogs 2, 1517 fund","Cal Poly Pomona, Fullerton College",,dudeofawesome,,,
Crypto Games,http://sdhacks2016.devpost.com/submissions/58524-crypto-games,"InspirationIn the modern world cyber security plays a huge role in our lives but is often neglected all the same. As more of our lives become part of the digital world we believe it is important that others develop good habits early on to facilitate a better and safer internet.What it doesIt is a project which aims to provide children with the best online security practices through a series of fun and challenging mini-games. How we built itWe used the Unity game engine together with C# scripting. Challenges we ran intoVersion control, specifics of C# language, and fine-tuned controls such as camera controls and character movement. Accomplishments that we're proud ofThis is our first time using Unity, C#, and model design so we are simply proud to have finished our project on time without prior knowledge.",,https://github.com/Tyfighter98/Cryptology-Games,,,"San Diego State University & University of California, Irvine / University of Edinburgh",,Tyfighter98,nsamarin,,
FUNBOT ROBOT,http://sdhacks2016.devpost.com/submissions/58525-funbot-robot,"ROBOT: Reddit Observation Bot On TwitchThis is a multifunctional Twitch bot that has meaningful and engaging interactions with its users.Its mission is to recognize a chat's sentiment, entertain users within the chat accordingly, and promote both collaborative and competitive activity within the chat.Recognizing a Chat's sentimentThe bot stores and analyzes recent chat messages for reoccuring emotes. Upon request, it posts the most popular emote of a certain time interval, which allows users to reflect upon the chat's hivemind and contribute their own 28-pixel creative expression. Chat activity and sentiment is used to adjust the bot's actions within the chat.Entertaining UsersThe bot uses Reddit to crowdsource artificially intelligent conversations. For example, it tells mystifying riddles that the community finds the most bemusing, breaking news that the community finds the most relevant, and hilarious jokes that the community finds the most humorous. These are the most agreed-with and conversation-provoking posts on Reddit, and we believe that Twitch may find these posts just as intriguing.Promoting ActivityThe bot promotes activity within the chat by raising challenges and contests on regular intervals. The bot currently has functionality to ask riddles and host typing contests. Riddles from the most thought-provoking posts from Reddit are asked, and the bot notifies users if they have correctly answered the riddle. It also hosts a typing contest, where one sentence is posted and the first user to correctly copy the sentence into the chat is congratulated and ranked in a leaderboard.Using the BotThe user types !menu to see a privately-messaged list of available commands.!typerace creates a typerace and posts the winner on a leaderboard.!leaderboard shows the leaderboard from !typerace.!jokes tells a top joke from Reddit periodically.!riddle asks a top riddle from Reddit and checks the chat for an answer.!news posts breaking news from Reddit.!emotepulse shows the hottest emote in a chat every few minutes.quit (cancels riddle or typerace when one is underway)joke (sends a random joke to the chat)NotesJokes and riddles are filtered for offensive content that does not abide by Twitch's Rules of Conduct.News posts, however, are intentionally sourced from uncensored Reddit posts to promote freedom of information.Typerace phrases are useful tips scraped from Reddit's YouShouldKnow subreddit, which allows users to learn as they type. The phrases are posted in Unicode Mathematical Alphanumeric Symbols and analyzed in Latin symbols to prevent copying and pasting.",,https://github.com/rjkoepp/ROBOT,,Twitch Moderation Challenge,UCSD,,jeff4elee,winsonluk,robertckoepp,
Risa's Garden,http://sdhacks2016.devpost.com/submissions/58526-risa-s-garden,"InspirationOur product is a combination of different motivations. First, we wanted to consider what programming could do on a wholesome, universal level. Our primary focus was on education. Secondly, this is our team's first hackathon, so we were aware of our limitations and inexperience and factored that into the concept of creating a finished product. A finished product was essential to us. We budgeted our time and we made the edits that we had to. All this so that we would be able to say at the end of SD Hacks, this is what we made. While we still have visions for what we would add or what Risa's Garden can become, we were aware of how important it is to be able to show people a finished product.Third, we were influenced by how we come from different backgrounds beyond computer science, such as art and music, and decided we wanted to make a game or some sort of interactive story. We were inspired by the direction western indie games have taken, with emphasis on storytelling and atmosphere.What it doesRisa's Garden is an interactive storybook! As Risa puts love and care into her garden, so can you!Risa's Garden is a story for kids with consciously constructed themes of investment, diligence, and friendship. The premise for Risa's Garden is the idea that if you take care of a garden, there will be flowers. But if you don't, then there will be weeds. Roy took this idea from his past teacher to create a story that explores this theme in more depth and synergizes this with the visual and sound components of the story.How we built itWe used Adobe Flash to create the program with Actionscript 3. The art was created with a combination of PaintTool SAI and Photoshop.Challenges we ran intoSound effects. Thanks to Eddy we had a library of different sounds we planned from the start on using to give a better, more dimensional game feel. We understood that sound effects give a sensory feedback that is essential when making an interactive experience. Unfortunately, we had difficulties implementing them into the program and if we had more time we would absolutely integrate sound effects for the actions.We had many sound problems during the creation process, so we made the executive decision to invest in the polish of existing sound elements of narration and music.Honestly, all in all, any challenges we ran into, any bugs we faced, we managed to solve together. Any human problems, such as creative fatigue, was solved by looking after each other (even if sometimes people wouldn't listen at first).Accomplishments that we're proud ofWe are so proud of the fact that for our first hackathon we have made a completed project that we can show people. It is also accessible to the general public; if anyone asks us what we made at SD Hacks, we can tell them we made an interactive children's book. It's not abstract, it's tangible. Everyone will be able to understand what that means.We are also very proud of everyone on our team. We could not have not made Risa's Garden without every member of the team. Everyone contributed something unique. When you work with friends who value teamwork, every step of the process is fun, even when you're dying. What we learnedWe learned the basics of Actionscript 3 when used for Flash. The most we learned about was the development process. We haven't yet gotten the development experience from beginning to end in class. We exercised budgeting skills by asking ourselves how much can we do in this time? What do we want to be done by this time? Do we have to cut this element? We exercised what it means to work in a team and understood what it meant for each member to be a functioning unit in order to make the most progress.Most of all, we learned how satisfying it is to have a completed project you made with your friends.What's next for Risa's GardenOur original dream for Risa's Garden was to make an educational experience for children. It was originally intended to be a typing game, but then in the interest of a finished product we budgeted our time and made cuts for our timeline. We wanted to unite this actual somatic education with the moral education of themes that you can see now in the story. For our team in the future, we absolutely intend on making more developed stories, experiences, and products.",,,https://s3.amazonaws.com/challengepost/zip_files/production/19929/zip_files/sdhacks_garden_folder.zip,Hack that Best Connects Us,"University of California, San Diego",,wongkatew,,,
Humble Abodes,http://sdhacks2016.devpost.com/submissions/58527-humble-abodes,"InspirationDuring our drive from Arizona, we started looking at what kind of equipment would be at SD Hacks and saw that the HTC Vive would be present.  Our excitement towards SD Hacks was heightened so much so that we watched tutorials the whole 6 hour drive.  One of our team members is the Vice President of the Game Development organization and is starting the initiative of bringing this kind of technology to Arizona State University.  We began to think of all the possibilities there are to utilizing the HTC Vive.  Then an even greater idea inspired moreso to win.  Imagine the possibilities and influence that bringing the ASU Game Development club an HTC Vive would have.  This would significantly help build the interest of ASU students in newer technologies and innovation.What it doesHumble Abodes is a creative interior design application that enables you to fully decorate and customize your home to scale.  Users are able to try different furniture configurations without the heavy lifting, transportation, or worry of unfulfilled design aspirations.  Utilizing the HTC Vive, Humble Abodes gives users the freedom to create the home of their dreams.  Before beginning, there are a few control features we would like the user to be aware about.  In order to move around the house, simply click and point the track pad button in the location you would like to be.  Anything mounted on the walls with the exception of the refrigerator cannot be moved.  Point the track controller towards the item you wish to pick up, click the track control, and hold the side button simultaneously to carry and hold items.  In order to add items into the room, click the track controller and bottom button towards the picture of the item you wish to add.  Lastly, to delete items from your home, pick up the item and throw it over the side of the house without letting go of the track control.  We hope you have a wonderful experience.  VR pleased to serve you.How we built itWe built our project using unity with C# scripts. None of the members in our group has ever had experience with virtual reality before, so we spent a good amount of time, at the beginning, playing with different Vive demos figuring out what we were capable of. We, then, found different templates on the asset store and started coding. Challenges we ran intoOur two biggest challenges were that only one person could test (and to some extent code) at the same time and that we were all inexperienced with virtual reality. With the two of those combined, it was really difficult to distribute a lot of the coding workload between team members and when we tried to learn how to do new things, it took a lot of tweaking and testing for only one or two people.  Accomplishments that we're proud ofWe are so proud that we can now say we have built an application for the HTC Vive. None of us had ever worked with virtual reality before, and it was an amazing experience learning and building the application. What we learnedWe learned so much through this process. Half of our team had never used unity before, and half of our team had never used C# before. We learned so much about how to create a virtual reality application, how to test one, and that if you just canäó»t figure something out, just take a walk around the room because usually everything seems to solve itself after a good break.What's next for Humble AbodeWith high hopes of winning the HTC Vive, we plan on sharing this technology with the Game Development club where students will be able to utilize and innovate creative, future applications.  By allowing other ASU students access, the HTC Vive will be put to greater use than just our team.  Our hope is that the ASU campus will be able to create a VR club similar to UCSD.",https://youtu.be/4iz538FUZls,https://github.com/ani6gup/HumbleAbodes,,"Most Entrepreneurially Promising Hack, SPAWAR, 1517 fund, 1517 fund",Arizona State University,,anyssaki,ani6gup,allison-dinapoli,eortega5
Project Mimic,http://sdhacks2016.devpost.com/submissions/58528-project-mimic,"InspirationWe were inspired to create and teach things in VR with the possibility of seeing outcomes in real time.What it doesThe user is able to build objects using primitive shapes such as squares and cylinders. The example we have provided is the satellite Sputnik and the user gets to combine shapes to make it. On the side, you are able to see a enlarged version of it for clarity and enjoyment.How we built itWe used unity game engine and C# with the HTC Vive.Challenges we ran intoIt was difficult to rotate objects and calculate the math to build objects.Accomplishments that we're proud ofIt was done mainly through scripts so I felt I learned a lot personally on how to do C#. I had mainly only done 3D modeling and had limited experience actually developing with the HTC Vive.What we learnedWe learned how to combine C# scripts to make a scene in the HTC Vive.What's next for Project MimicLots of things we like to implement more, like seeing data in the objects projected in the giant area and actually implement real time movement and modeling.",,,,SPAWAR,UC San Diego,,kagcaoili,,,
VRBox,http://sdhacks2016.devpost.com/submissions/58530-vrbox,"InspirationOohh....What it doesHow I built itChallenges I ran intoAccomplishments that I'm proud ofWhat I learnedWhat's next for VRBox",,,,,UCSD,,dkubatko,,,
SpeakEz,http://sdhacks2016.devpost.com/submissions/58531-speakez,"InspirationPublic speaking is one of those anxieties that everyone has. It is difficult to overcome, mainly because people lack the opportunity to get in front of a group of people to practice speaking. This lack of practice exacerbates the fear, creating a positive feedback loop, making public speaking the worst phobia in North America. We built SpeakEz with the hopes of helping people make public speaking a normal thing. What it doesSpeakEz presents the user with the proper environment to practice public speaking. By utilizing a virtual reciprocating crowd, the user can prepare for any public speaking scenario. Users have the option of listening to their own voices (something many dread), as well as seeing their own hand movements. This allows the user to become comfortable with public speaking in private until he or she becomes a public-speaking pro!How we built itOur team utilizes Unity and the Oculus Rift API to provide the immersive environment for the user. To further provide a realistic feel, we attached the head-mounted display with a Leap Motion, allowing users to see their hands and the different gestures that people unconsciously make. Lastly, we used a 3D printer to create a compact kit that held the setup together. Challenges we ran intoOur main challenge was figuring out different methods of measuring anxiety using the hardware and software we were provided with. Initially, we tried using a speech-to-text API to feed data into a tone analyzer, but after being unsuccessful in working with the APIs, we had to search for other queues that could be used to measure anxiety. Coordination was also a challenge, as using git would be near impossible with the sheer size of the files. Accomplishments that we're proud ofThis was the first time the team had worked with the Oculus Rift (or any VR dev kit for that matter). We also built an accurate model of the SDHacks event in the short period of time we were provided with. Lastly, we overcame software and hardware difficulties and were able to create our own algorithms for measuring how nervous users were.What we learnedWe learned how to cope with the hardware issues that made development hard.What's next for SpeakEzThe team plans to work on making the models more realistic, while nailing down the version control for when we all work on the project. ",,https://github.com/cjsimon/SDHacks,,"Most Entrepreneurially Promising Hack, SPAWAR, 1517 fund","UC Davis, Sacramento State","Alienware Laptop,Leap Motion,Arduino 101",apguan,cjsimon,justinmend,ShahGitsit
sathya,http://sdhacks2016.devpost.com/submissions/58533-sathya,"sathyasathya is meant to be a messenger bot that gives descriptive answers and information instead of links, like every other messenger bot. Though he's still growing, you will find that he can answer common questions on general knowledge well enough. Try asking him who Barack Obama is, for example. Soon, sathya will be able to answer more specific questions.URL: https://quiet-hollows-31880.herokuapp.com/sathya/",,https://github.com/nivisathya/sathya,,,"University of California, San Diego; University of California, Irvine",,nivisathya,Jv01,,
BugOut2,http://sdhacks2016.devpost.com/submissions/58534-bugout2,"InspirationBuilt with Amin Fozi. Californians are the greatest. However in today's technological mecca, and time of great prosperity, Californians have somewhat taken the fact that we are super prone to natural disaster pretty light heartedly. Drills that we run in school are ineffective and I believe that it is necessary for everyone to have a plan if god forbid tragedy does strike.What it doesIntroducing Bug Out 2. We take Google's API and SDK and we help you make a plan for your loved ones by mapping out three rendezvous points and we will find you moments before an oncoming storm. We will prompt you to launch our app and based on your preset rendezvous points, we will use Google to route you to those three possible points and reunite you with your family. Our app will allow you to snap each route on your phone so that if the cellar towers we have grown so accustomed to go down, you won't be stranded. How I built itAlong with my partner I met here at SD Hacks, we felt the importance of this issue as a social/ public safety issue that goes unaddressed in an effective manner. We feel that since there is a smart phone in most Californian's pockets why not put their emergency preparedness close by so no one get's caught off. Challenges I ran intoMy partner did not know any Swift at all nor he own a Macbook. Swift 3 was upgraded and many of the frameworks both built in and open source were deprecated. It made it challenging on both of us at a complete disadvantage to partner up with each other. However, we felt that we stood to gain a lot more by working on this together. Eg.1 We had to practice that awesome pair programming we do here at UCSD. We took turns programming and debugging. We helped each other out by looking up solutions and translations to Swift 3 from Swift 2.3 to Objective-C. Eg.2 We also learned new ways to parse JSON with the built in JSONSerialization in Swift. It was not without a challenge. Syntax had changed drastically with Swift 3 and the open source framework SwiftyJSON was not up to date and could not be used to parse our JSON code. So we utilized our tutors helps to understand how the JSON worked and we broke it down step by step and I feel better equipped to handle JSON now than ever. I'm sure my partner feels the same.Accomplishments that I'm proud ofWe were able to parse JSON without SwiftyJSON. Something I had been really reliant on. I am happy that I ran into that challenge and I over came it. I am also proud of building an app that utilized the Google Maps SDK and Google Directions API something I thought was so crazy because I was accustomed to either working primarily with SDKs and hardware. I definetly had to push myself further and make myself uncomfortable to get to this point I feel now and that is boldly proud and happy I came out.What I learnedHow to not be reliant on source frameworks! To be quick on my feet! To work with your partner no matter how frustrating it gets and help each other learn above all. I really focused on integration with Web API and working with a new SDK which was also super nerve wracking at first but ultimately, something incredibly useful. What's next for BugOut2-Save options and the emergency provisions list.-Figure out why Firebase Auth failed and allow for group planning via WiFi-Get some travel time data from Google's API-Search for that perfect Natural Disaster alert API which we would use for push notifications. -We are considering Wunderground or GDACS.org",,https://github.com/dannypenguin/BugOut2,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, 1517 fund, 1517 fund",UCSD,,Dannypeng,Amin-Fz,,
Hack Hate,http://sdhacks2016.devpost.com/submissions/58535-hack-hate,"At SD Hacks 2016, our team took on the Hack Harassment challenge. The Hack Harassment Challenge acknowledges that we can't guarantee eliminating online harassment, but we can work toward creating a safer online environment. For 36 hours, we aimed to create a software tool that would identify hate speech online and put a positive spin on it.We believe that to combat online harassment, we need to change how we approach hate speech. Thus, we took two approaches.One tool (found in homepage.html & forms in Accordion.html) would identify and hide hate speech from users by collapsing the text. If the user decided to read the text, they can expand it, but the hate speech would be accompanied by a positive comment from us.The second tool (found in Hack_Hate_Extension) would allow users to actually hack harassment by using the inspect tool on Chrome. Users are reminded that what they see is just text and it can be changed. We encourage users to change the text to something silly or positive and share their changes to inspire others.Ideally, using hate detection software, we could stop harassment before it starts. But learning to handle harassment is an important life skill and our tools are designed to give people some reliable armor. However, both tools are incomplete for now.Dev TeamRosy PendletonMagali JimenezPhuong Tammy10/02/2016",,https://github.com/rosypen/SDHacks2016,,HackHarassment Swag Bag,"University of California, Irvine",,rosypen,magalij32,,
Bit Chat,http://sdhacks2016.devpost.com/submissions/58536-bit-chat,"InspirationIn our modern day, we have multiple ways of communicating with others. However, the fact remains that there can be reception and network problems caused by unforeseen scenarios, such as state emergencies, war, and natural disasters. All of these scenarios can pose great stress on current cell towers and can disrupt our means of communications. Bit Chat is here to provide a solution to this problem.What it doesBit Chat allows the users to communicate with other users using the wifi spectrum. In addition, it allows the users to communicate without the dependency of cell towers or the internet. How we built itThe Bit Chat team constructed the app on Android Studio and implemented parts of Rastaghi's encryption algorithms to ensure a secured peer to peer communication. Challenges we ran intoThe Bit Chat team were composed of second year students with limited knowledge of socket programming, encryption, and android hardware. Within the 24 hours, we ran into network crashes and encryption errors. Accomplishments that we are proud ofThe Bit Chat team are proud on tackling a graduate level project that could be a stepping stone to a new company.What we learnedWe have learned to plan ahead on current and future projects. Furthermore, it inspired all of us to continue exploring computer/mobile networks and mobile development.What's next for Bit ChatWe plan on complete the peer to peer jump implementation to increase the range of Bit Chat",,https://github.com/tacalvin/SDHACKS2016P2P,https://s3.amazonaws.com/challengepost/zip_files/production/19933/zip_files/Consulting_proposal.pdf,"Hack that Best Connects Us, Collector's Edition of Watch Dogs 2","University of California, RIverside & University of California, Irvine",,lepatrick3459,neroh5,tacalvin,jerryjiekaijiang
Parking Space Tracker,http://sdhacks2016.devpost.com/submissions/58537-parking-space-tracker,"Inspirationhaving to drive around a parking structure just to find that one empty space that was on the top floor or not finding one when you have driven to the top floor of the structure (or bottom depending on location). Now more than ever especially with autonomous cars being introduced we need a way to keep track of empty stalls inside of parking structures which will be easily available to everyone. This program will do just that!What it doesThis program keeps track of how many stalls are available in an empty parking structure. Using this information as the day progresses (people leaving and entering the structure) the program will keep track of the empty spots in each floor and transmit it to the drivers looking for a stall How we built itWe used a raspberry pi and a camera to take screenshots, the screenshots are then checked to see if the bottom or top plane is broken by a different object which in our example is a toy robot, but in real world applications it will be the car. Challenges we ran intoWe ran into a couple of challenges at the start especially with setting up the camera with the raspberry PI, This was our first use of a PI and had no prior knowledge of how to use it or how to install the camera so it was trouble setting it up. Also when checking to see if there was a change in pixel colors we had to run tests to determine the margin of change that we will allow in the pixel change to account for objects of similar color to the ground.Accomplishments that we're proud ofWe are really proud of how much we were able to accomplish in a short window of time, and honestly we are proud that we have something working that we can presentWhat we learnedWe learned how to configure some parts of the raspberry PI and the PI camera. We also learned some basics in image manipulation.What's next for Parking Space TrackerWe plan to set up a mobile app with an improved interface and see if we can improve the tracking software to ensure there are no miscounts in vehicles",,https://github.com/nimitzkers/SDHacks.git,,"HackHarassment Swag Bag, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, General Atomics, Collector's Edition of Watch Dogs 2",University of California San Diego,,nimitzkers,teepann,kimjaspermui,
Lazyyy,http://sdhacks2016.devpost.com/submissions/58538-lazyyy,"InspirationLaziness  + Mandatory Meeting + Other errands  -> LazyyyWhat it doesThis is a super convenient trip planner. All you need to do is to tell us how tight your schedule is, what you want to do before leaving, and your preferred transportation options. We will handle the rest of the work for you!How I built itWe collaborated on three parts: interface design, algorithm design, API services. Each group member committed one or two aspects and frequently got feedback from each other. Challenges I ran intoTo find best estimated time through greedy approaches. To design responsive layout.Accomplishments that I'm proud ofUser friendly interface.What I learnedGoogle API services, geo encoding, greedy algorithm, materialize design, human computer interactionWhat's next for LazyyyLazyyy will further adapt customization for each user, gathering data and giving smarter feedback through machine learning algorithm.",,http://liside.github.io,https://s3.amazonaws.com/challengepost/zip_files/production/19920/zip_files/Lazyyy.zip,,UCSD,,liside,anhar-adiljan,shunge,XavierXinweiWang
Matrix Re:coded,http://sdhacks2016.devpost.com/submissions/58539-matrix-re-coded,"Arduino ##LEDmatrix ##shift registersI wanted to do something different rather than lighting up the whole 8x8 LED matrix, so then  I connected it to shift registers and did bit manipulation. I shifted out a byte of data one bit at a time and programmed it to also light up one LED at a time after another. I looped it so it looks like one LED is running through and across the matrix.",,,https://s3.amazonaws.com/challengepost/zip_files/production/19921/zip_files/Matrix.txt,"General Atomics, 1517 fund",UC Riverside,,vtran037,gcorrea19,jsiow001,silkez123
Packet Sniffer ,http://sdhacks2016.devpost.com/submissions/58540-packet-sniffer,"InspirationWe wanted to know how many times people visited stack overflow at a hackathon. Therefore we wanted to capture packets and track what was going on around us. Soon it changed from just tracking stackoverflow visits to tracking all http packets. What it doesThe app tracks http request that are being thrown in the current network and visualzes how many visits different websites have. ALong with that we can also track the history of a specific mac address that we have detected. How we built itWe used GO to develop the backend for sniffing packets and then passed the data to our html pages which displayed the data. The data was visualized using the d3 js library. Challenges we ran intoIt was challenging to get the right set up and environment working. Especially trying to get permiscuous and monitor mode working to allow us to grab packets. Accomplishments that we're proud ofGot permiscuous mode to semi work, until it stopped.What we learnedNever deal with wireless packets and your wifi card when you have an operating system to do it for you. What's next for Packet SnifferIt will live in a corner of github for all eternity. ",,https://github.com/marcoflowers/HacktheWorld,,"1 TB Hard Drives, Hack that Best Connects Us, Collector's Edition of Watch Dogs 2","UC San Diego, University of Illinois Urbana Champaign",,yash620,abrandemuehl,marcoflowers,
Juke,http://sdhacks2016.devpost.com/submissions/58541-juke,"JukeTwitch plays Spotify.Local use:These instructions assume you have Nodejs and npm installedMake the sure the necessary dependencies are installed.  In the server and client folders, there are package.json files that specify what is needed. Run:$ npm installin the server and client folders.I also recommend installing the module nodemon. It will watch your server and client files for any changes and restart the server servers accordingly. You should install it like this:$ sudo npm install -g nodemonIf you do not have access to sudo, running your command prompt as an administrator will have an equal affect.After all the installations, run the server.js file in both the server and client folders with$ nodemon server.jsAfter running the nodemon command in both folders, the browser will open the configuration page for you. Follow the commands to configure Juke for your stream.You must configure Juke before each stream and keep it running during your stream. Be sure to close the command line when your stream is finished or you want to stop Juke.",,https://github.com/aarohmankad/juke,,"HackHarassment Swag Bag, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, 1517 fund, Twitch Moderation Challenge, 1517 fund","UC San Diego,  UC Riverside",,aarohmankad,aabadill,,
Liquid Slam,http://sdhacks2016.devpost.com/submissions/58542-liquid-slam,"SDHacks2016Ismail AlamEric ChenSon TangJeffrey PhungDescription:This is a Twitch chat bot that parses incoming Twitch messages and uses that to create Mad Lib styled sentences that will display in Twitch chat. In addition to this, we have utilized the default Twitch emotes keywords. So whenever a keyword is typed, the respective emote will display in the Mad Lib sentences.[List of default Twitch emotes]Another feature of this bot is the ability to record the number of messages in chat in certain time intervals. This can then be used to determine when the stream is popping off: to record and find highlights quicker and easier.Finally, we have implemented a way to gather Reddit posts relevant to the stream content.Overview:Def.py - Handles all the logic to parse Twitch messagesRun.py - the driverInitialize.py - Connects to channel roomSettings.py - Twitch IRC AuthenticationSocket.py - Python Socket Connectionstemplates.py - Default Mad lib sentencesPrerequites:-Python 2.7.*-prawHow to run:python Run.pyCommands list:!help - lists commands!liquidslam - generates Mad Lib!restart - restarts bot!ping - returns PONG!shutdown - shutdowns bot!msgrecord - records frequency of messages in a given interval (seconds)!kappa - shows how many kappas you've kapped!red - search for a relevant reddit postREMEMBER TO: change the pass, ident, and channel values insettings.py!",,https://github.com/mialam24/SDHacks2016,,Twitch Moderation Challenge,UCSD,,z03h,mialam24,jjphung,
Promptify,http://sdhacks2016.devpost.com/submissions/58543-promptify,"InspirationMost applications and extensions that help users track change in prices are limited to predefined sites. We wanted to develop an tool that can dynamically determine the desired element on a webpage and allow the user to set certain criteria for email notification.What it doesUpon clicking the ""Select Element!"" Button in the Chrome extension, any element the user hover's over on the webpage will be highlighted for easier selection. When an element is clicked, for example the price of an item on Amazon, the chrome extension popup will fill up the following information:-The value of the selected element.-The parsed ""numerical"" value of the element.-The URL of the webpage.-The 'id' of the element.The user can then enter their email (required for email notification) and an upper bound value to compare the selected value with and determine if an email notification is required.The last step is to click the ""Notify Me!"" button which will send all of the relevant info our server which will continue scraping the provided site and element and will email the user of the change in value when detected.How we built itThe chrome extension itself uses Javascript, HTML and CSSOur backend server runs node.js and sends emails to users using SparkPostChallenges we ran intoEach time the Chrome extension popup closed, the popup page is reset, and therefore would not retain any of the selected values. So we used a Background page to store the HTML data on the popup and restore it when the user reopens the popup.Often times a user may select an element on the page that does not have an 'id' attribute. This made our job of relocating the element during scraping very difficult. We were getting started on generating an XPATH to the element and decoding the XPATH to lead us to the desired element rather than 'id'. However we did not have enough time to completely implement it.Accomplishments that we're proud ofAs many of us do not have much experience with the technologies (javascript, chrome extensions, node.js, SparkPost API integration)We were proud to have created an application that could possibly redefine the way automated webscrapers work. A user can now interactively select any web element and decide the criteria for Promptify to prompt them with an email.What we learnedWe learned a lot about collaboration during the course of this project. It is so important to keep your teammates up to date on both present and completed tasks.What's next for PromptifyAs of right now, Promptify is more of a proof of concept. However, we plan on making selection of elements fully dynamic by locating elements by way of XPATH instead of 'id'.We also want to support more criteria for email notification (value in a string changes, string itself changes, etc). The possibilities are endlessLastly, we want to inject the emails with CSS to make them look nicer.",,https://github.com/georgezhe/sdhacks2016,https://s3.amazonaws.com/challengepost/zip_files/production/19923/zip_files/Promptify.zip,SparkPost,UCSD,,georgezhe,,,
Smart Outlet,http://sdhacks2016.devpost.com/submissions/58544-smart-outlet,"InspirationSmart ThingsWhat it doesTurns things onHow we built itWires and codeChallenges we ran intoPowering and algorithmsAccomplishments that we're proud ofBeing able to turn regular products into smart productsWhat we learnedAndroid development and that it actually worksWhat's next for Smart OutletBetter UI, smaller design, more features",,,,"General Atomics, Best Internet of Things Hack","University of California, Riverside",,phung001,bboypolarbear,,
ForgetMeNot,http://sdhacks2016.devpost.com/submissions/58547-forgetmenot,"InspirationWhen going to class I forget important stuff way too often. I wanted to fix that. What it doesForgetMeNot allows you to scan PDFs of your transcript into a central destination, and it processes it and pulls out important due dates, and uploads them to a database. These items can also be edited by hand.After that, a wifi-connected micro-controller is able to pull your assignment information and display it on an LCD readout, which can be placed in a non-conspicuous place on your bag.How I built itI created a web application using nodejs with locally hosted mongodb. The web server was powered by node's express package, and was integrated with the React library to make a very smooth and intuitive web application.Challenges I ran intoThis was my first time using React to create a web application, so I learned a tremendous amount in the process. This is also my first project of such a scale. Accomplishments that I'm proud ofEverything. I put a lot of effort into the project, and although I did not finish in time for the dev post submission, I really an pleased with what I was able to do in these 36 hours.What I learnedAn amazing amount about react and web programming in general.What's next for ForgetMeNotI'll be continuing work on the app after the hackathon for good measure.",,http://www.github.com/aaronptb/SDHacks2016,,,University of Texas at Austin,,AaronPTB,,,
Meeteor,http://sdhacks2016.devpost.com/submissions/58548-meeteor,"Fiscally Dangerous, Social Skills SteroidsEver been tired of failing your plans at self improvement by well-timed laziness by the you of the future? With Meeteor, you hold yourself hostage -- with an app-enforced personal blackmail system that highly incentivises you to train your communication skills with like-minded strangers! Forcing yourself to be a better person has never been easierApp donates 5 dollars from your bank account to charity when you don't meet your preset goalsTwo way rating system that provides feedback as well as feedback for that feedback, to improve twice as fast!Smartly pairs up individuals based on proximity, times available, and topics of interestGreat way to pitch your new ideas, improve at introducing yourself to others, and become a more elegant speaker overallBuilt!React Native, with server & database on Amazon Web ServicesWhat's next for MeeteorMore donations to charityfind a safe location to meetimprove upon scheduling customizationsAdditional reward systemGroup event scheduling",,https://github.com/davidzheng/SDHacks2016-Project,,"1 TB Hard Drives, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, 1517 fund","UC San Diego, UC Riverside, UIUC",,allenwan96,,,
GPS Signing for DocuSign ,http://sdhacks2016.devpost.com/submissions/58549-gps-signing-for-docusign,"Inspiration""Geospoofing"" is a widely known entry level form of security evasion. It seemed appropriate to create a device at a hackathon to combat it What it doesBy interfacing the DocuSign API with a physical GPS, it makes it very difficult to sign documents without your knowledge. How I built itThe key to the Geosigning is just getting a very low level form of communication (Serial) to play nice with the higher levels of communication that DocuSign uses (we chose to implement it with Java). Challenges I ran intoIt isn't common to need to interface a low level hardware communication protocol with java, so finding reliable libraries to perform these tasks, and IDEs that didn't give us sass about them, was very challengingAccomplishments that I'm proud ofFor most of us (aerospace or electrical engineering focused), using high level languages and scripts that the DocuSign API uses was a new experience and we learned a lot. What I learnedHow to read API documentationWhat's next for GPS Signing for DocuSignEncrypting the information passed between the arduino and the application. Hosting the application on a web server. Adding a mobile application (which we made good headway on) for double GPS security. ",,https://github.com/cmflannery/SDHacks2016,https://s3.amazonaws.com/challengepost/zip_files/production/19924/zip_files/main.java,"HackHarassment Swag Bag, 1 TB Hard Drives, Domain.com Swag Bags, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, DocuSign, SPAWAR, General Atomics, Best Internet of Things Hack, SparkPost, 1517 fund, Collector's Edition of Watch Dogs 2, 1517 fund",UC San Diego,,JohnMesserly,pthb35,,
TicTacToe,http://sdhacks2016.devpost.com/submissions/58550-tictactoe,"*/This is a Tic-Tac-Toe game created on Android Studio. Users will play as ""X"" and the computer will play as ""O"". They must click on any of the squares in the 3x3 grid to place their mark on it. Immediately, the computer will take its turn to place its mark on a different spot. The computer decides where to place its marks randomly, finding an empty spot through recursion. When either the player or computer wins, or if there is a draw, a notification pops up to declare who won or if it was a tie. There is also a reset button to start the game over.*/",,https://github.com/aaronapte9/tictactoe,https://s3.amazonaws.com/challengepost/zip_files/production/19925/zip_files/app-release.apk,,"UC San Diego, UC Irvine",,aaronapte9,AbrahamKO,,
Rote,http://sdhacks2016.devpost.com/submissions/58551-rote,"Making flash card review interpersonal instead of individual.We have 8 decks (currently) based around Computer Science education keywords.  Players select a deck, and one player puts the phone in front of them/against their forehead so they are not in a position to see the screen.  It is the other player's job to describe the term on the screen.  Players may flip down if the guess the word correct, or flip up to skip.We built this app using Java and Android Studio.We needed to use the phone's accelerometer to determine when it had been flipped forward or backward, and we struggled to form a coordinate axis that responded to players' movements while not being too sensitive.  We also used multiple screens to describe ""Success,"" ""Finished,"" ""Time's Up,"" and ""Skip,"" and were challenged to figure out how each screen would interact with the others in terms of visibility/disappearance at key moments.To be honest, this was our first hackathon for all of us so we're just glad to have finished!How to integrate various java classes and libraries and use the Sensor class to access and monitor the phone's accelerometer.If we continue with Rote, we want to add the capability to allow players to build their own deck.  We definitely see this app as being practical to the education field, so giving teachers/students the ability to create their own review keywords would make us more marketable.",,https://github.com/josh-zeitsoff/SDApp,https://s3.amazonaws.com/challengepost/zip_files/production/19936/zip_files/Rote_2.zip,,"UCSD, Berkeley",,josh-zeitsoff,nathanaelsee,cathyphamle,
BucketList,http://sdhacks2016.devpost.com/submissions/58552-bucketlist,"When there's a place you want to visit, bucket it. The next time you're in the area, your phone will alert you that you're close by to that place of interest.",,https://github.com/luujfer/SDHacks2016,https://s3.amazonaws.com/challengepost/zip_files/production/19927/zip_files/SDHacks2016-master.zip,,UCSD,,luujfer,surtle,,
Stratus,http://sdhacks2016.devpost.com/submissions/58553-stratus,"InspirationWe wanted a beautiful way to visualize weather indoors. What it doesStratus displays various types of weather (rainy, sunny, cloudy, thunderstorms). Can be controlled using UI.How we built itWe built the actual product using a raspberry pi, clear plastic container, and cardboard. We created a UI using html, css, and javascript in order to control what weather wanted to display.Challenges we ran intoTime crunch, setting up the network connections at the hack. We didn't have optimal parts, we only have a blue led light.Accomplishments that we're proud ofCreating a working prototypeWhat we learnedLearned some front end.  What's next for StratosWho knows?",,https://github.com/syueric1102/weatherbox,,Most Entrepreneurially Promising Hack,UCSD,,ejsyu,douglaspan1,Jwl027,vincentt24738
Chatter,http://sdhacks2016.devpost.com/submissions/58554-chatter,"We were new hackers looking to create something. Looking at the goals of the companies present, we liked what Viasat was aiming for. So we tried to develop a web app under their goals.It's a local chat that allows two people to communicate through one computer.We checked out many tutorials, and found this one.Our original idea was solid but after working through 6-7 tutorials (since we aren't experts in web applications), none of the platforms were right for us.We made something at a hackathon.I learned that I should research projects previous to the hackathon and then learn the tools to use it.I'd like to develop chatter into our idea called Pulse. Pulse was a chatroom based on location. You were able to communicate to people within a certain distance of yourself. You could create and join chatrooms that were similar to your interests. Pulse could also be used for alerts, warnings and city based communication.",,https://github.com/JacobPoole/Chatter,https://s3.amazonaws.com/challengepost/zip_files/production/19928/zip_files/Chatter.zip,Hack that Best Connects Us,"University of California, Riverside",,JacobPoole589,waoimapanda,KowawaKoala,
Renty,http://sdhacks2016.devpost.com/submissions/58555-renty,"Name: Eric LinDate: 9/30 - 10/2Renty is a website where people can post items they have lying around that others might need. Think of Amazon: a broad selection of all the items you could possibly imagine, except everything is for rent. This way, we can reduce on unecessary clutter around our houses (by not buying a new item you might only use once) while also allowing the renting owner to make some quick cash for items they maybe haven't needed in a few years. The driving force behind Renty was to solve a consumerism problem for people. Personally, I know that I have often bought an item I thought I needed, only to never use it again after its first initial use. What I did this hackathon: This hackathon, I wanted to get the bare bones idea and bare bones UI down for my project. Working alone, the pace was considerably slow. What I want to do with this in the future/post-SDHacks: The next challenge for me is to build the backend of everything. Make it so 'Login' actually logs someone in. Make it so 'Post' will actually register an item in the database,e tc. I don't have any (very little) experience with back-end, so I am excited to work on that. ",,https://github.com/ejlin/Renty,,"1 TB Hard Drives, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, SPAWAR, Best Internet of Things Hack, 1517 fund",UCSD,,tgih1999,,,
WorldDiseasesViz,http://sdhacks2016.devpost.com/submissions/58556-worlddiseasesviz,"What it doesData visualization of WHO world disease deaths.How we built itUsing Windows Presentation Foundation, python, and D3.js.Challenges we ran intoRendering web page as file is insecure, serving file over web server on localhost.",,,,,"California State University, Long Beach",,Akivuls,Vardominator,,
Jabbr,http://sdhacks2016.devpost.com/submissions/58557-jabbr,"InspirationPeople shouldn't be afraid to voice their opinions. Too many people are letting their natural rights get crushed because they fear retaliation. But, the only way our society can evolve and progress is through productive discussion. With Jabbr, we hope to solve that problem by providing both a friendly and thought-provoking environment.What it doesUsers choose trending questions in topics they are interested in, choose their sides of ""for"" or ""against"" them, and the app will match them with people on a different side to start one-on-one chat. However, the user can also choose to talk to someone with similar opinions if they just feel like getting to know other like-minded individuals :)Users can also start chatting with nearby people about trending topicsHow we built itThe project is mainly based on Swift and Firebase for data storage and chat functionality. The detection of nearby users are achieved by Bluetooth LE technology. Signing of terms and services works through REST APIs provided by DocuSign, part of it using a Raspberry Pi as a middle-end server.Challenges & AccomplishmentsResults from HTTP requests can be difficult to parse due to Swift's limitation, but we found hacky workarounds through a Raspberry Pi server. What we learnedClever use of debugger; ability of quickly reading and understanding developer documentations.Host servers on Raspberry PiRead difficult-to-understand documentationDevelop peer-to-peer communication with BluetoothWhat's next for JabbrWe will incorporate machine learning to crawl trending topics and questions on websites and add them automatically to the app.Machine learning is also useful for supervising chatrooms to ensure a safe and friendly communication environment",,,,"HackHarassment Swag Bag, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, DocuSign, 1517 fund, 1517 fund",UCLA,,maxwyb,jiayao,,
Meme Check Bot,http://sdhacks2016.devpost.com/submissions/58558-meme-check-bot,"InspirationWhen the crowd of hackers chuckled at the mentioning of Twitch chat it's fame of memes. I knew I had jump at this opportunity to create something that's both chuckle inducing for me and its users.What it doesA Twitch chat bot that replies with the definition of memes whenever somebody say ""meme check -insert meme-""How I built itI used Java to built this bot. More specifically, I used PircBot, a java framework for irc bots to build the basis of bot. To obtain information about the memes, I used Jsoup, a java library for webpage parsing.Challenges I ran intoChallenge #1The IP of the hackathon's wifi seem to be banned by Twitch, most likely due to the abundance of bots created by hackers alike, the combined message output by all the bots combined may have triggered a ban from Twitch.Accomplishments that I'm proud ofJumping onto a subject that I have no knowledge of and making something it.What I learnedIRC chat basics, webpage parsing.What's next for Meme Check BotMeme Check Bot is happy to provide valuable meme knowledge to any streamers that may want to enable this bot.",https://youtu.be/A1tRC_BcBq0,https://github.com/JWang5252/Meme-Check-Bot,https://s3.amazonaws.com/challengepost/zip_files/production/19931/zip_files/Meme_Check_Bot.zip,Twitch Moderation Challenge,UCSD,,JWang5252,,,
Speasy,http://sdhacks2016.devpost.com/submissions/58559-speasy,"InspirationA 2016 study by ____ showed that x% of Americans were afraid of sharks, y% of Americans were afraid of the dark, 19% of Americans were afraid of death and an astounding 41.6% of Americans were afraid of public speaking.What it doesA conceptually simple, yet technologically advanced software that empowers individuals to get over the fear of public speaking by employing principles of communication a psychology.How we built itChallenges we ran intoWe ran into a number of challenges. This was our first hackathon and our first time working with unity and htc vive so this was all new to us. A day before the final submission unity crashed and we lost more than half of our code which we had to type all over againAccomplishments that we're proud ofLearning unity, building an interactive virtual reality project that we couldn't even think of doing.What we learnedTeam Work, Unity, HTC Vive, how to work under pressure What's next for Speasythe scope of this project extends beyond just people who are afraid of public speaking, but to those who just want practice with a particular environment and crowd. If I am a travelling businessman who has to go to India to make a presentation, I can practice with an Indian crowd and understand their social expectations and behaviors. This is also extendable and usable by any and every company, even the ones sitting here, that needs to train their employees or interns. So great! Now you are comfortable giving a presentation in front of an audience. But what about being an audience member and having the courage to stand up in front of the and an esteemed speaker to ask a question? This project is easily extendable to change your viewpoint and become an audience member. This project hence takes care of all of your fears of public speaking. ",,https://drive.google.com/open?id=0Bw3xXGVzITLLZXowY1JhOVhxZ00,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, 1517 fund",ucsd,,rudr,,,
Locare,http://sdhacks2016.devpost.com/submissions/58560-locare,"LocareLocation sharing app by William Lee, Kyle Wong, and Cai Yeo.Locare is an application that allows users to display their status and/or interests to other people from different locations. It is stored with a SQL database by recent activity, so the users can refresh to see a new group of people in which they want to talk to, based on interests and/or proximity to their current location, thereby allowing users to connect to others locally as well as around the world.We used Android Studio (Java and XML), PHP, SQL, Linode for the hosting server to store the database, and Github for version control.To facilitate the development of the application, we used storyboarding to visualize the interaction between different elements and the connection between front end and back end elements within the application.Without much prior experience to PHP and SQL and with lots to discover as our first hackathon, we made some progress but not as much as expected, though we have a working implementation of the application. This application can be expanded to include groups based on similar interests to effectively connect users globally.",,https://github.com/willyjlee/Locare,https://s3.amazonaws.com/challengepost/zip_files/production/19932/zip_files/SDHacks_2016.pptx,Hack that Best Connects Us,"University of California, Los Angeles; University of California, San Diego.",,willyjlee,joominyeo,kylewong975,
3D Shopping,http://sdhacks2016.devpost.com/submissions/58561-3d-shopping,"InspirationWe no longer have to experience the boring 2D view of a product in online shopping. We came up with the idea of this boring experience and turn them into a project. We wanted to make something productive out of AR besides gaming, something that could enhance the current system of operations and make the life of customers simple.What it doesIt's an augmented reality meant to ease shopping, it allows users to experience a 3D view of the products, and differentiate two similar products. Basically whenever a user use this 3D Shopping app, they get a detailed info about the product along with the 3D model which help them to visualize it in a better way. We are also gathering personal information about the users (optional) to personalize their search and reduce the wastage of time. Besides, we could also extend it to suggest products that have been bought in their social network which none of the current systems provide.How we built itWe used Unity to build the augmented reality 3D shopping app. We implement the Vuforia library to detect the images and used freely available 3D models to meet our requirements. We used Facebook login as a way to authenticate and find more people in their network who are interested in a product. Challenges we ran intoIntegrating Android-studio code and Unity code was challenging. Having to learn Vuforia library and display the 3D models are a new experience to use.Accomplishments that we're proud ofWe could offer a 3D experience to our users and a live comparison between two products, which help ease the problem of many choices. What we learnedWe know Unity in a much better way now than before. We had no prior experience working on Unity, but this was a great chance to learn and showcase our ability.What's next for 3D ShoppingGetting to browse products from smartphone with 3D experience.",https://youtu.be/udn8TySK-ZQ,,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, Best Internet of Things Hack, 1517 fund, 1517 fund","University of California, Davis, University of California, San Diego, University of California, Irvine",,EvelinFong,singhmaharshi,mia97,
RandomBot,http://sdhacks2016.devpost.com/submissions/58562-randombot,"Why did we make RandomBot?We wanted to create a bot which entertains users on twitch. We started off with cat facts, since everybody likes cats. The list of features gradually expanded from there.What is RandomBot?RandomBot is a twitch chat bot made purely in html / javascript which responds to a list of given commands. It also reads the text that users send in chat to automatically generate some real-sounding messages.What can RandomBot do?Supported commands include !cat, !chuck, !chuck2, !dadjoke, !help, !joke, !latvia, !nerdyPickupLine, !number , !pirate , !pokemonPickupLine, !schneier, !showerthought, !subreddit , !talk, !yoda , !yomama. How do these commands work?These commands use various APIs from the internet such as cat facts api and chuck norris jokes API. Some of the other commands such as !nerdyPickupLine and !pokemonPickupLine pull from a predetermined list of pickup lines. The reddit commands such as !dadjoke, !showerthought, and !subreddit  use reddit's random feature to output the title and contents of a random post on a given subreddit.!talk uses chat messages and a markov chain text generator to create convincingly real text.",,https://github.com/MatthewUng/SDHacks2016,https://s3.amazonaws.com/challengepost/zip_files/production/19939/zip_files/project.zip,Twitch Moderation Challenge,UCSD,,kevinwu1,,,
Joynin,http://sdhacks2016.devpost.com/submissions/58563-joynin,"InspirationAs an online student, I spend the majority of my time working in a home office, which isn't very social. I wanted to find a way to host people at my home while covering the cost of internet, coffee, snacks, etc.What it doesJoynin lets you post a space, and lets others join your space as a monthly subscription which is billed using Stripe. Try it using the test credit card number of 4242 4242 4242 4242, any card verification code and any expiration date in the future.How I built itI used Google App Engine's datastore for the database, and Stripe's API for payments. Other than that, I used python, html, and css. There's also a snippet of javascript to implement Stripe.Challenges I ran intoI had to reinstall some aspects of my dev environment to implement Stripe, as they require TLS 1.2, and my python version was using 1.0Accomplishments that I'm proud ofI did it on my own, in a short time.What I learnedThis is the first time I used Stripe, so I learned the basics of their API.What's next for JoyninI hope to rebuild it as a mobile first web app.",,https://github.com/rubalcava/joynin,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack",Arizona State University,,rubalcava,,,
A Space Team,http://sdhacks2016.devpost.com/submissions/58564-a-space-team,"A Space GameWelcome to A Space Game! A Combination of Battleships, Star Trek, and that one Real-Time Strategy game you remember from middle school, A Space Game is the result of 36 hours of bugs, hacking, and lots of waving our hands in midair by 4 first time VR-hackers. InspirationWe were inspired by how VR can transform traditional game and simulation experiences. The ability to move around the space and take different perspectives allows for a lot more information to be presented to the user, and a lot more immersive an experience. We decided to create a real-time strategy game to make use of these new opportunities. In the game, the player controls a set of Alliance ships, against an armada of enemy Vorg ships. The ships automatically fire within a certain distance of an enemy, and thus the player's job is to position the ships in order to maximize the damage they deal to the enemy. ToolsA Space Game is built using Unity and the Vive VR system. ChallengesWe are all new to VR, only one of us had ever done game development, and only one of us had ever been to a hackathon before. Learning Unity, learning C#, and figuring out how the game engines work were a huge challenge for us. We also had a change of direction in the game. While we originally intended a much more subtle game, with a focus on radio pings to discover previously invisible ships, we found that the visual impact of a full-scale space battle was just too tempting. Perhaps because none of us had more than casual experience with VR, we were blown away by the capabilities of the technology and focused on an immersive, and impressive, visual experience. The ResultsWhat are we proud of? This is our first VR game! We're proud of how much we have learned, about VR, about Unity, and 3D games. We are also proud that we have what we consider to be a functional and very entertaining final product. In particular, we are very proud of having figured out the controls and the very visually informative waypoint guiding system for player controlled ships. We learned a lot of things about project management especially. As a designed-driven project, we often had disagreements about what direction the game should take, and often had trouble explaining our ideas to each other. If nothing else, we learned how to stay calm and trust each other in making big decisions, even if we don't always see the other person's vision. Next StepsNext for us is, hopefully, some VR equipment :) In all seriousness, having spent so much time with the Vive, we are convinced of the amazing capabilities of VR even beyond gaming. For this project, we hope to re-introduce some of the features we removed, and create a menu where the player can choose between the various ways of playing the game. Some more focus on balance and level design would also really enhance the experience. ",https://www.youtube.com/watch?v=wj5W5CwVfFY,https://www.dropbox.com/sh/jmjv4w28c1fbvaf/AAD9IuzOp4l9yJbR1mss7WA-a?dl=0,,"1 TB Hard Drives, Most Entrepreneurially Promising Hack, SPAWAR, General Atomics, 1517 fund, 1517 fund","UCSD, San Diego Mesa College",,aayvazov,zytyxx,,
Specto: Credit Identity,http://sdhacks2016.devpost.com/submissions/58566-specto-credit-identity,"InspirationWe know that credit card theft is prominent in our society today, so we wanted to create an application that added extra security to credit card usage.What it doesOur application uses facial recognition to map a face to a credit card number, so when a credit card is used, the application will know if the right person is using it.How we built itWe enrolled and verified the identity of individuals by inserting Kairos's open-source Rest API by converting images into a base64 string and posting them to kairos's server, where an algorithm deconstructs the face using facial geometry. Then, when another image is used to verify the identity, the algorithms uses a standard deviation as means for comparison and returns a confidence level. If the confidence is within a specific range below 90%, we then re-enroll the new image to ensure the algorithm is dynamic.  We used HTML/CSS to create the user interface.Challenges we ran intoMatching the face to the credit card number was difficult since lighting in the surrounding environment was an issue. Additionally, we had to deal with parsing the credit card number read by the credit card scanner.Accomplishments that we're proud ofWe're proud of the fact that the facial recognition software can match a face to a credit card number with confidence.What's next for Specto: Credit IdentityWe are not entirely sure yet.",,https://github.com/abisarvepalli/Specto,,,"University of California, San Diego",,AdityaMullick,abisarvepalli,javisth,
Ask For It.,http://sdhacks2016.devpost.com/submissions/58567-ask-for-it,"InspirationPeople in college have a lot of trouble with stuff that should be, or should be optionally contractual. What it doesPresents a contract for two individuals to sign. There are many kinds, such as selling something, sexual consent, etc. How we built itDjangoChallenges we ran intoNoneAccomplishments that we're proud ofAll of themWhat we learnedDocusignWhat's next for Ask For It.I'll need to sleep on that. ",,http://askforit.herokuapp.com/,https://s3.amazonaws.com/challengepost/zip_files/production/19935/zip_files/app.json.zip,"DocuSign, 1517 fund",UC San Diego,,nick11roberts,herculees,hermstadalex,
VR PC Builder,http://sdhacks2016.devpost.com/submissions/58568-vr-pc-builder,"InspirationEveryone on our team has built our own PC's, and find it valuable to teach others about the basics of the assembly of a PC. Especially since many might not want to commit to the high price tag. One big problem with building PC's is part compatibility, especially making sure each part fits the case. We also found the need as PC building enthusiasts to test build custom computers using VR in order to experiment with the compatibility and looks with different parts. What it doesOur project is a Virtual Reality application that instructs users how to build their own computer by picking out each component and assembling them together while following step by step instructions. Advanced users can pick out different components in order test the compatibility of the parts together, e.g. to make sure the ram isn't too tall that it blocks the CPU cooler.How we built itWe used Blender to model 3d computer parts, and built a Unity application that runs on the HTC Vive.Challenges we ran intoCable management is a big part of PC building, and so we tried to have a section of the tutorial that lets users connect wires together. The first problem here was that the Unity library disabled support for InteractiveCloth in the version we used, which was a straightforward way to make physical wires. We implemented our own dangling wire physics but it was too laggy and would spasm when extended too long so we had to scrap this part.We also didn't have a full user story at the beginning of our hackathon, so we had trouble putting together the UI and designing the UX off of a uncertain foundation.Blender assets were difficult to create, and consisted of the majority of our assets. They were also difficult to import into Unity.Accomplishments that we're proud ofSmooth VR user experience with no discomforts. Intuitive snapping mechanism for teaching new users how to put together computer parts. Detailed custom computer assets. Beautiful tutorial visual interfaces.What we learnedWe learned that we should start with user stories, in order to know exactly how our app will function. We had the idea but we didn't have our user story until halfway through our project.What's next for VR PC BuilderTo partner with manufacturers in order to help their customers better preview the product before purchasing.To partner with distributors such as Fry's Electronics or Best Buy in order to give customers the ability to build their computer in store and make sure parts are compatible before purchasing.We want to get more detailed and scaled components so it will more accurately represent the size and design compatibilities.",,https://github.com/daletubat/SDHacks2016,,"Most Entrepreneurially Promising Hack, SPAWAR, 1517 fund, 1517 fund",UCSD,,foilder,oscarpan,pandabrah,daletubat
ViDraw,http://sdhacks2016.devpost.com/submissions/58569-vidraw,"ViDrawTrack moving objects in your video and display the path they follow.",,https://github.com/brandonxxlee/FootballPath,https://s3.amazonaws.com/challengepost/zip_files/production/19937/zip_files/Vidraw.zip,"HackHarassment Swag Bag, Domain.com Swag Bags",UC Berkeley,,jozhang,SirjanK,,
Rick's World,http://sdhacks2016.devpost.com/submissions/58570-rick-s-world,"InspirationWhen we were beginners to the programming, we found the most interesting thing about programming is to be telling the computer to do whatever you want through commands. However, it is always the case that the difficult programming language grammar daunts the beginners to explore them further. It is not easy to write or understand very complicated codes. So, we built a game that eases the complex grammar but keeps the logics. The player can  feel the magic of programming through building the world.  What it doesOur character, Rick, is controlled by commands written by the player, with pretty much the same syntax as C/C++/Java. With the initial curiosity, the player can joyfully type in commands as they familiar themselves with the programming syntax. For instance, Rick.move(40)This command moves Rick forward by 40 pixels on screen.world.add(apple, 300, 200)This command creates an apple in the game at point (300, 200).In the future, we will add more interactive elements to the game. Therefore, the player can freely make their own world through codes, and, at the same time, learn programming and have fun. Be creative ; )How we built itWe first split the task into several pieces, e.g. graphics game panel, text input interface, control panel, and syntax analysis. Each team member contributed to a part which he is best at. During the development process, the group was in active communication regarding interface compatibility and changes of design to face previously not considered incidences. Group members were also actively helping each other to solve bugs. After a part is finished, codes is assembled, compiled and tested to make sure they worked as intended. Then the whole project is compiled, debugged and tested.Since we are using Java, we used three JFrames in coordinate with each other, one for control panel, one for text input and the other one for game interface. A center controlling class GameController is used to control the game. In the main method, text input frame and control panel are set up and linked to GameController, whose responsible for setting up the GameFrame. Then GameController.startGame() method is invoked, causing a new World object to be built from WorldFactory class with level 1 and assigned to a GameView. GameView reads in the assigned World object for its dimensions, paintable objects and paint respective objects on the Screen. World object embodies an ArrayList of PaintableObjects(namely PaintObject class), which GUI GameView gets and paints them one by one, are assembled in the WorldFactory, Each PaintObject has these properties, x, y, width, height, orientation, and tag. Every property assists the painting of objects. The routine is that, WorldFactory creates a World object, which contains all the information about the game, then the information is passed to GUI for display.The commands typed from the console are passed into the Game using a mechanism called Events and Actions. Every world or scene has events attached to them. Each event has a category and a name. When user types in a command, syntax analysis will work to figure out the category (in Java, the receiver), the name(in Java, the method name/field name) along with the arguments. Then, the world will match the category and the name against the all the events it is aware of ( from the scene event table or global events table). If a match is found, the associated action of the event will be executed, with the parameters read from the console. Actions are responsible for altering the world in certain ways as described by the command, e.g. reset the character's position, add things to the paintable objects array. In this way, the player can create the world using a wide variety of available commands and takes advantage of the flexibility of programming languages.Challenges we ran intoThe biggest challenge for us is that we did not come up with an idea of what we were going to hack at the beginning. We spent a huge amount of time brainstorming and researching ideas, but each time when we thought something great, we found the exact same idea had already been taken by someone else. It frustrated us a lot. We strongly believe a great and unique idea is essentially important for us to create something entertaining and inspiring. æThe next challenge is the collaboration. All of us are freshman and new to the programming. None of us had an idea of how we are going to finish the work together. In this process of exploring, we learned new things, made many mistakes and know more about each other. This is the most valuable price we earned in this hackathon.Accomplishments that we're proud ofAt the moment when we integrate our codes together and press the start button, and äóìboom!äó everything was running fine, just as we expected, we were so excited about our accomplishment. æThis is the first time for all of us to work together by designing the frame of the code and splitting the jobs evenly by ourselves! We wrote different parts of the code, and it just worked, like a magic to all of us. Probably as we are all beginners to the programming, we did not understand how hard our goal is. Eventually we realized that what we had accomplished is a new language and an interpreter! This sounds incredible to all of us and none of us believe that we could have done this without cooperating with each other.What we learnedAs this is our first time to be here at hackathon as freshmen, we learned that what is it like to work in a team in software development. In our high school, we often completes the projects on our own without help from others or any kind of collaboration. In hackathon, however, we worked the first twenty hours to come up with a great idea, then we worked as a team instead of as individuals. We need to help others along the way in order to accomplish our common goal. The joy we get, after the project finally completes, however, was also four times the individual fulfillment.What's next for Rick's AdventureAfter a few introductory levels, Rick's World will eventually be a commpletely free game. What we want to accomplish is that the program can give players with no previous programming knowledge a hand-on experience to learn about the basic logic of programing, but not the exact grammar, because the idea is more important; and the real game begins when they finish the adventure and enters Rick's World. The world is a blank sheet and the only object that pre-exists in the world is Rick. We design the controll panel allowing the player to create new methods or even classes into the program itself, thus, adding new objects, events or actions to the game. Also, we want multiple players to be able to edit the same world together, each one of them contributing their power. We believe that the creative community would be able to show the magic that beyond our imagination.",,https://github.com/SDHacks2016/SDHack,,"HackHarassment Swag Bag, 1 TB Hard Drives, Domain.com Swag Bags, Hack that Best Connects Us, Best Use of DragonBoard, Most Entrepreneurially Promising Hack, DocuSign, SPAWAR, General Atomics, Best Internet of Things Hack, SparkPost, 1517 fund, Twitch Moderation Challenge, Collector's Edition of Watch Dogs 2, 1517 fund",UCSD,,UltimatePea,liuzhao1225,chy136,Mossaka
Burn-android,http://sdhacks2016.devpost.com/submissions/58571-burn-android,"Imagine having a witty conversation with one of your closest friends and out of the blueYou #getrekt with a burn. With no time to spare and no ingenuity left in you with thisstaggering wound, you pull up the Burn app. With support from anonymous crowds all overcountry, you manage to utilize their crowdsourced ideas to deliver one of the bestcomebacks you have ever had the privilege of reading.This Burn app offers and intuitive and fun experience of getting users from all overto assist in offering their wit and articulation in making conversations with friendsa more exciting experience.",,https://github.com/akhahaha/Burn-android,,Hack that Best Connects Us,UCLA,,akhahaha,jlin97,,
Tesseract,http://sdhacks2016.devpost.com/submissions/58572-tesseract,"InspirationOur inspiration comes way back from when we created the prototype for the Tesseract. We wanted to create a device that could engage and expose the human mind to different forms of animated graphics.What it doesThe Tesseract is meant to serve as a multipurpose graphical display. It has usefull and creative purposes in the areas of art, engineering, and the Internet of Things. For artistic purposes, the Tesseract has the capability of using 3D to 2D graphical projection to display 3D objects on a 2D plane. The Tesseract is good for engineering purposes when it comes to using the Tesseract as a method of displaying the status of systems or as a XY plane for plotting data. Lastly for the Internet of Things, the Tesseract is capable of displaying the weather, news, musics, and other aspects on each of the six displays.How I built itThe Tesseract consists of the frame, RGB Matrix displays, Arduino, and any wiring needed to connect it all together. We designed the frame of the Tesseract using SolidWorks and used the 3D printers at SD Hacks to print the frame. The RGB Matrix displays are all connected in series and the DATA IN pin is connected to the Arduino for the data signal. Challenges We ran intoThe main challenge we ran into was having enough memory in the arduino to support all of the functionalities that we wanted. Originally our plan was to connect an accelerometer/gyroscope to the arduino also, but we weren't able to because the code for the sensors and the RGB matrix was too large.Accomplishments that I'm proud ofWe proud of having been able to fabricate the entire cube in a weekend. What We learnedWhat's next for Tesseract",,,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, General Atomics, 1517 fund, Collector's Edition of Watch Dogs 2, 1517 fund",UC Riverside,,gcorrea19,jsiow001,vtran037,silkez123
Tick Tock,http://sdhacks2016.devpost.com/submissions/58573-tick-tock,"InspirationMichelle was a scrub and forgot to return the textbook she checked out from the library within the 3 hour period allotted. Outraged, she thought, ""There has to be a better way to do this. I wish I had something to remind me."" Thus, our project was born.What it doesTick Tock (TM) is essentially a text-based reminder system with a web based interface to set up reminders. The idea is that it would be set up on a tablet or PC at places such as library check-out desks, event registration tables, etc. to allow people to easily and quickly register their number to get reminders for a specific event. It's oriented towards short-term services, rather than, for instance, having to download an app and register every event you attend on it.How we built itWe used Angular2, through the angular-cli tool, to develop our front-end. Materialize CSS was used for design, and we used the Twilio API for sending text messages to users.Challenges we ran intoFRIKIN PORT 80 ON OUR AWS SERVER STILL WON'T OPEN #TRIGGEREDEDIT: @9:55AM still won't open, I cry.Accomplishments that we're proud ofWe got angular-cli to work, after many struggles. What we learnedWe need more time. Plz. Debugging is the devil. Also angular-cli is 2 new 4 us, needs more documentation (and StackOverflow).What's next for Tick TockCurrently, our reminder system gives a preset reminder a preset time after the user enters their number. Next steps would be allowing users to quickly and easily set up a custom message and time to remind/time delay from entry, then load our current number entry page to use their specific settings for that session.",,https://github.com/kevinchow7/sdhacks2016,,,"UCI, UCSD",,akoppula,,,
MazingVR,http://sdhacks2016.devpost.com/submissions/58574-mazingvr,"Imagine you open your eyes and find yourself within the center of a supernova, staring at the entrance of what looks to be a maze. With no other signs of life in all directions, you have no choice but to enter.MazingVR is a maze exploration game set in a zero gravity space environment. Your goal is to escape the maze while collecting all the space orbs along the way. Exploring our beautiful yet ominous maze is the stuff of dreamsäó_and nightmares.",,,,,UCSD,Oculus Rift,gkrulce,dreznikov,samueladamsonline,
Talent Cloud,http://sdhacks2016.devpost.com/submissions/58575-talent-cloud,"InspirationIt is now recruiting season,and many students are encountering problems with their resumes, cover letters and portfolios, desperately seeking consultations from industry professionals and their peers in order to effectively showcase their achievements and appear their best for their prospective employers especially during career fairs. What it doesThis app is specifically designed to solve the desperate recruitment problems these students are facing, as it provides an interactive platform for students to exchange and review project ideas, cover letters and resumes to maximize their application potential.How we built itWe mainly used Java and Android studio to build the front-end and Google Firebase for the back-end.Challenges we ran intoDisplaying the PDF for the resumeBuilding the server for data storageDebuggingAccomplishments that we're proud ofWe managed to integrate the commenting and resume and portfolio display features for our app, which is what sets this professional networking app apart from other similar ones. What we learnedWe learned to code efficiently and effectively as a group, as this is not an ordinary skill that is taught in most CS classes. In fact, this is our first experience programming in large group of more than 4 individuals.What's next for Talent CloudWe would want to run a pilot program in UCSD colleges by encouraging students to try our app before the upcoming career fair. We also would like to invite companies to join our flourishing community so they can have access to many students who are actively seeking guidance in their job application pursuits, and hopefully help them and spot budding talents early.",,https://gitlab.com/MonsterHacks/Talent-Cloud,,,UCSD,,yuc279,Roysha,sru,IgorWu
Dog or Nah?!?!,http://sdhacks2016.devpost.com/submissions/58576-dog-or-nah,"InspirationFrom the viral dank meme!!What it doesA game played using the keyboard to guess correctly if the image shown is of a dog or food as many times in a streak as possible.How I built itBuilt with HTML, CSS, JavaScript, and lots of laughs and learning along the way.Challenges I ran intoWe ran into challenges with implementing JavaScript correctly, as it was new to all of us.Accomplishments that I'm proud ofCompleting our first hack!What I learnedThis project was a great introduction to the world of web dev and we can't wait to dive deeper.What's next for Dog or Nah??!!CalHacks 3.0!!",,http://dogornah.herokuapp.com/,,,UC San Diego,,sandrahluo,imbtran,,
WorkField - You own unlimited space,http://sdhacks2016.devpost.com/submissions/58577-workfield-you-own-unlimited-space,"InspirationHonestly, I would say there was even a inspiration at all. Lol. The thing is I luckily got a Oculus Rift, because I never have enough money to own any VR equipment, when first time to Hackathon, I found it offers Oculus Rift and HTC VIVE! I was so excited and request one immediately and I got it!Second, the space of urban office is going so so expensive. People have to share their office, and there is no privacy somehow even. Moreover, even you could get fit on that, you won't have a lot freedom on office, you have to follow some certain rules. So I was thinking that how about to build a world which has unlimited possibility to modify it by your own, and it could get rid of all those restriction. Third, playing gaming is always bad idea when you share you room with other. You won't get any piece if your roommates don't have a similar schedule, and small space has, again, same problem as above. Even you have your own house, you have to care about sorting different stuff. You won't be enjoy a lot because you have to consider aftermath. If you lost something, you have to spend a lot time on that.What it doesBy creating a whole space area in virtual world, your own idea is restricted in that tragic small screen no more. You could also get rid of the interference from outside world, it also get rid of the interference from outside world. I basically create a virtual space for different modifying. People could wear a VR equipment and get into the space which allows to modify whatever they want. I would rather say it is a platform rather than some kinda individual software. Due to lack of development ability and experience, I offer just some basic tools which allow people stream their actual stuff from real world like the desktop and setting interface, which allows people to using keyboard in virtual world. I am also leaves some space to improve including different kinds of widgets, and also easy-use development environment.How I built itI use basically Unity3D and C# to build this VR apps. I would says it's just a light app because it is still not completed individual software. I was able to build it by searching tons of pages. Challenges I ran intoThat's my very first time I've been Hackathon and I should say it brings a lot of burden on me. Moreover, I am a international student who even does not speak English well. This is my first year to ucsd, so I actually expect nothing when I come here. But unexpectedly, I got my dream equipment via MLH, and I decide not waste it. The first day and a half, I was almost submerged by tons of different programs. I have to figure out installing all those things, and finding all those drivers and programs were super complicated for me cuz language (sigh). and I made it work, and I also make the framework of the appsAccomplishments that I'm proud ofI was knowing so little about the computer science. I am totally fool about C# and Unity and not matter what programming language. But I was doing so far as I doing my best. I complete the interaction between the computer streaming and the app itself which there is so less information about that in Internet. And I also complete the interaction via Leap Motion using hand gesture. I was able to use my hand to play inside of my apps. a Lot of Fun!What I learnedI learned a looootttt. I would say it was the best experience I ever had. I makes a couple of friends and they gave me a lot of courage. Although I just sleep one or two hours in this 3 days, I can't stop my progress because I was so excited that I could do so far at the situation I know little about the computer science.What's next for WorkField - You own unlimited spaceI would like to add some widgets like browser, album, real-time changing environment, clock, office text tools, or even virtual Multi-person video chat room. It could also comes with two camera which allow to scan the nearby environment to create a connection and model between virtual and real world.",,,,,UCSD,"Oculus Rift,Leap Motion",robinxz,,,
StoryBot for Twitch.tv,http://sdhacks2016.devpost.com/submissions/58578-storybot-for-twitch-tv,"InspirationTo create the first ever project outside of school.What it doesCan collaboratively create sentences using !story and  !storyFill commands on twitch.tvHow I built itUsing a IRC client in Java to connect to twitch.tv and creating an algorithm for the storiesChallenges I ran intoString manipulation to get the stories to replace and store submittions from users.Accomplishments that I'm proud ofActually creating a working copy on time!What I learnedI learning rapid prototyping is really useful and fun to test out an idea even though it might sound silly at first.What's next for StoryBot for Twitch.tvWe're going to add more stories and add new commands for users to modify the stories later on!",,https://drive.google.com/open?id=0B8N-NGjTZvtrV2h4QjRuaUI3N1hvaEJnbGk2X0h3TFhqdno4,,Twitch Moderation Challenge,UCSD,,headevenil,,,
Re:Art,http://sdhacks2016.devpost.com/submissions/58579-re-art,"InspirationPrisma beats the worldäó»s filters, but its functionalities are only limited to processing still images. We want to make the video artistic as well, so we create Re:Art.What it doesRe:Art is a Web App that aims to transform a video into an animated artwork by furnishing it with a particular style or pattern of paint chosen by the user. How I built itBack-end:By utilizing the open-source VGG19 neural network model and Torch Framework, We set up a comprehensive back-end still image stylization service based on the AWS and G2 instance in the EC2 service. We achieve the non-linear video processing result through Open CV (Open Source Computer Vision), which enable the web app Re:Art allowing users to process a self-designed animated artwork.FlowChartRead user input:When a user uploads a video and chooses a picture style, we will read in the video and style they choose, and we will decide the frame number based on how long we want the output gif file to be.Transform the video:We pick up the images based on the frame rate, and then crop the images into the size with the ratio 8.5:11, which is roughly 300px * 388px. Also, we uses advanced compression algorithm to make the image further smaller without losing much of its original quality.Due to the undesirable efficiency of the Neural Network Framework, we came up with several ways to increase our efficiency use multi-parallel subprocess to transform the image simultaneously, and use the resources of the server to its maximum. Because we depend on GPU rather than CPU to have a better performance, we chose the AWS instance that has more GPUs. Because the feature of the Open Source Torch Framework is based on Lua, we manipulate the iteration time on each image to achieve an effect of transition, giving user a feeling of more dynamic stylized images.Output Gif:We store the image to an array and restructure them to form a gif, which is finally presented to the user.Front-end:We designed a user-friendly Web App using HTML5, CSS, JavaScript, JQuery to orient the users to upload their videos, choose a style that they prefer and follow the page to finally get the stylized gif. On our home page, we designed as few icons and concise instructions as possible to make it clear to the new users on how to use the app. After uploading a video, the user can choose within a scroll bar several different styles of artworks to merge the video with. Then our app throws the job to the server to complete stylization process. When itäó»s done, the user is directed to another page where he/she can view the resulting gif and share it to Facebook, Twitter, Google Plus etc.Challenges I ran intoWhen we set up the service in the beginning, we need to install a bunch of libraries. The fatal thing is that these libraries have version conflicts, which took us a long time and drained our energy. At first we decide to se TensorFlow, an Open Source Software Library for Machine Intelligence, but the time this library take to process video is too long. Thus, we have to change our Framework to Torch. We worked with several programming languages (Lua) and Framework (Torch) that weäó»ve never encountered before, so we had a high learning curve.The stylized image was rotated after the transformation, and we need to align it to normal.The biggest challenge is: it got super hard to code on 6am!Accomplishments that I'm proud ofWe achieve the functionality of not only stylizing the static image, but also for video. We see our web app works pretty well. What I learnedSleeping is reeeeeeeaaaaaaally important.What's next for Re:ArtMigrate the app to multi platforms.Immersed in the conversation with our comprehensive services.",https://youtu.be/fbFoO_PgI1o,http://reart.xyz,,"HackHarassment Swag Bag, 1 TB Hard Drives, Domain.com Swag Bags, Hack that Best Connects Us, Best Use of DragonBoard, Most Entrepreneurially Promising Hack, DocuSign, SPAWAR, General Atomics, Best Internet of Things Hack, SparkPost, 1517 fund, Twitch Moderation Challenge, Collector's Edition of Watch Dogs 2, 1517 fund",UCSD,,azureric,RussellXie7,ZhuojunChen,
Synapse,http://sdhacks2016.devpost.com/submissions/58580-synapse,"SDHacks2016READMESynapse is a Web2Web website creating tool, useful for creating instant, lightweight and safe websites. It's Web2Web torrent-based architecture removes the need of having a full time network domain and server architecture. All you have to do drag an HTML file, in and a shareable URL will popup instantly.",,https://nikhil-bose.github.io/Synapse/,,,UCSD,,Nikhil-Bose,sanshit-sagar,,
Twitch Chatbot,http://sdhacks2016.devpost.com/submissions/58581-twitch-chatbot,"InspirationInterest in making a bot and working with APIsWhat it doesThis bot posts a link to a random popular piece of art work in Twitch chat, based on the game being streamed.How I built itChallenges I ran intoAccomplishments that I'm proud ofWhat I learnedWhat's next for Twitch Chatbot",,https://github.com/limichel/twitch-chatbot-hackathon/tree/version-1,,Twitch Moderation Challenge,UC Irvine,,limichel,,,
Lynx,http://sdhacks2016.devpost.com/submissions/58582-lynx,"a",,https://gentle-mountain-65668.herokuapp.com/,,,UCSD,,VCS,,,
Virtual Reality DJ,http://sdhacks2016.devpost.com/submissions/58583-virtual-reality-dj,"InspirationThe original vision was to mess with visualizations in VR, because we time management experts figured these types of projects would be the most interesting and usable project within a short time frame.Our goal was to make something fun, invigorating and visually entertaining. We all enjoy a listening to music on a quality pair of headphones, but we wanted to take that experience further by enhancing it in a very different way. What it doesSelect the music of your choice, and wear the Google Cardboard. Look around as you are surrounded by an infinite amount of stars, dynamic sound amplitude bars, and perlin noise waves. Watch the visualization change pace as it detects a beat. How we built itUsing Unity and the Google Cardboard API. Challenges we ran intoPerforming signal processing, messing around with audio in realtime, detecting beats, performing an FFT to get all the amplitudes for each frequency, interacting with the Cardboard and the equalizer bands in an effective and intuitive way. A lot of other things we're probably to tired to remember.Accomplishments that we're proud ofWe built something that's fun to use. We learned Unity. We built something.What we learnedHow to:UnityGoogle CardboardMaking an equalizer, visualizer, and perlin noise wavesWhat's next for Virtual Reality DJ - Immersive Audio MixingMaking it into a full fledge DJ suite, where you can drop virtual objects that act as sounds into a box that will mix audio. Adding more features and releasing it on the Google Play Store. Virtual Reality DJ was developed by Akash Khosla, Alexander Mai, Alex Chew and Marko Ritachka. ",,https://github.com/half-potato/vrdj,,,"UCSD, UC BERKELEY",,spectreweb,artiespeedy,alex-chew,
D-Loc,http://sdhacks2016.devpost.com/submissions/58584-d-loc,"InspirationWith growing technologies such as Ceph by Red Hat and the Hadoop Distributed File System, the idea of distributing files over multiple hardware devices has garnered a strong following in recent years. We wanted to spread this rapid expansion with everyday consumers. We hoped to give users a secure and redundant way of managing private files.What it doesD-Loc allows users to spread their files over multiple devices, increasing file access security. D-Loc spreads out files over a multitude of the user's devices, giving each device a small, encrypted section of the file. Only when all devices join the same network, and log in to the user account, are the pieces able to be put back together, and the original file retrieved. How we built itOur stack consists of:Front-end: Electron application built with AngularJS and Firebase which communicates by TCP sockets to the router.Back-end: Node.js socket.io server.Tools and Scripts: Compression, encryption, and striping scripts written in Python.Challenges we ran intoEstablishing secure socket connections between the client and server. File transferralIntegrating Python scripts with an Angular webpageAccomplishments that we're proud ofBuilding a multi-platform controller that works with very little back-endCustom communication protocolsA fully real-time connection to all client devicesWhat we learnedWorking with a multitude of different stacks, languages and protocols without conflictsSecurely distributing files and user informationWhat's next for D-LocScalabilityMechanism that scales to massiveBuild on top of version control (eg. git) for added security",,https://github.com/D-Lock/D-Lock-Client,,"Collector's Edition of Watch Dogs 2, 1517 fund","University of California, San Diego",,RedbackThomson,Tremainne,FuturizeHandgun,
Autodibs,http://sdhacks2016.devpost.com/submissions/58585-autodibs,"InspirationCreate a monopoly on all study rooms in gieselWhat it doesReserve rooms automatically for youHow we built itSelenium and PhantomJS on pyhtonChallenges we ran intoOptimzing the speed of the scriptAccomplishments that we're proud ofI can monopolize GieselWhat we learnedWhat's next for Autodibs",,https://github.com/makman09/autodibs.git,,,UC San Diego,,makman09,,,