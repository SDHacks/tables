project,link,Plain Description,Video,Website,File Url,sponsors,Mlh Points,Mlh Hardware Lab,Submitter Screen Name,Team Member 1 Screen Name,...,
Channel Stats,http://sdhacks2016.devpost.com/submissions/58173-channel-stats,"Displays two Twitch channels side by side, for when you wanted to watch two channels at once. Two Twitch Bots are present, one in each channel, scraping data and counting it up and performing a side-by-side data comparison of the two channels, allowing one to compare the differences in memes, popularity, and activity between different games, as well as different channels. ",,http://channelstats.herokuapp.com/,https://s3.amazonaws.com/challengepost/zip_files/production/19863/zip_files/Twitch.zip,Twitch Moderation Challenge,UC San Diego,,chenboy3,,,
HoloComm,http://sdhacks2016.devpost.com/submissions/58187-holocomm,"InspirationAs Generation 0 and Generation 1 immigrants ourselves, we all come from multilingual backgrounds.  English fluency is a critical skill for success and assimilation in our society, we wanted to use some of the most exciting trends in industry - VR and IoT - in this space for maximum impact.What it doesHoloComm is a real time translator.  Users enjoy the following features:Visual output (on Hololens) of surrounding English audio translated into user's preferred languageVisual output (on Hololens) of English text in field of view translated into user's preferred languageObject recognition and labeling in EnglishHoloComm is also able to interact with our IoT avatar, Pikachu.  The object recognition feature recognizes Pikachu as the avatar and the the user is able to initiate conversation.  Pikachu, empowered by api.ai's natural language processing framework responds in conversational English.  The entire conversation is tracked by the user using the same visual output on the Hololens as before and is transcribed to the user's email using SparkPost.  Pikachu is meant to serve as an educational aide for users to practice their English at leisure.How we built itLots of love <3 Many different technologies come into play here.  The majority of code is in C# to interface with the Hololens. connecting to hardware occurs over a Firebase database which triggers Python running on a Arduino.Challenges we ran intoStoring and processing snapshots of the visual field of Hololens to perform OCR and Object Recognition.  Currently, the images are being pushed up to imgur with Microsoft Cognitive Services analysis subsequently.Accomplishments that we're proud ofBuilding a complete user experience with rich interactivity.What we learnedHow to build a user interface in Unity for the Hololens.  How to develop natively in C# for functionality usually accomplished in Node.js.What's next for HoloCommMore features! An immediate addition is a gamified extension to object recognition which asks the user to identify certain objects with Pikachu as prompter.",,https://github.com/sampurnabasu/HoloComm,,"SparkPost, Most Entrepreneurially Promising Hack, Best Internet of Things Hack, 1517 fund",University of Southern California,,Sampurna,sagar7p,MakePLAN,ziran
HackFinder,http://sdhacks2016.devpost.com/submissions/58245-hackfinder,"InspirationWe go to a lot of hackathons, typically we drive but on occasion we've flown. We wanted a tool that optimized our decision making process when getting to and from hackathons. What it doesIt's a tool to streamline deciding on travel options to the lastest hackathons and optimizing your reimbursement. How we built itWe used Google's, Uber's, Lyft's and Mapbox's APIs to determine routes that are as efficient as possible.  Challenges we ran intoGetting all the APIs in synch. Accomplishments that we're proud ofWe are really proud of our design, we wanted to have a really strong UI and great UX. What we learnedWe learned how to efficiently used transitions while optimizing data transfer to the user. What's next for HackFinderAlthough we are focusing on hackathons for now, we eventually plan on expanding HackFinder into a full-fledged travel app considering the modern person's travel options (because options like Uber and Lyft aren't typically considered).",,,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, 1517 fund, 1517 fund",UC Merced,,dhalili,4shub,Totalizor,jonathanmoran
C.A.R.M.,http://sdhacks2016.devpost.com/submissions/58249-c-a-r-m,"InspirationWe wanted to allow people on the same website to connect and talk with each other. There is no reason to constantly create new messaging apps and channels and such to communicate with people who are currently browsing the same page as you are (especially applies to hackathons)Take for example Discord. No one uses it, yet people have questions. Having one extension that allowed people to chat with anyone in the channel would be amazing, lightweight, and efficient.How we built itWe built an extension for Chrome using Javascript. The chat is accomplished using the MQTT protocol which holds the backend of the service. We push and pull messagesfrom this server and display them on the popup that is created when the extension is opened. We used JS, HTML, and CSS to design the functionality and look of the UI of the popup and used the material design standard.Challenges we ran intoSetting up the MQTT server took a little bit of time, and neither of us are front-end developers, so playing around with the JS took some getting used to.Accomplishments that we're proud ofCARM is fully functional on nearly every single website out there, and if we publish it to the Chrome Store, then ANYONE can start using it. It's the first app made at a hackathon that can be published nearly instantaneously after the end of the event for half our team.What we learnedWe gained a critical understanding of how to setup and work with MQTT servers to handle the storage and push/pull of messages. We also got to work more on our front-end JS, HTML, and CSS skills which is a stark change from the Java/Android frameworks that we have more experience with.What's next for CARMWe want to be able to send messages that include videos/audio. However this would require us to upgrade from the MQTT service that we are currently working with to something along the lines of Pub Nub, or more. But we accomplished what we came here for, and feel that we can continue to develop this in the future.Now anyone can Communicate Among Random Masses",,https://github.com/vanshg/CARM,,"1 TB Hard Drives, Hack that Best Connects Us",UCLA,,vanshgandhi,sahilmgandhi,,
Designated Driver,http://sdhacks2016.devpost.com/submissions/58251-designated-driver,"In the era of Big Data, we struggle to comprehend the scope of the statistics we have. We know thousands of people are killed by drunk driving, but unless someone is in that situation it‰Ûªs impossible to really understand the psychological impact.Our SDHacks project is the solution to put a human experience to the numbers. We‰Ûªve created a simulation where the viewer is literally experiencing drunk driving, vision blurred by intoxication, alcohol in hand. Using the full immersion the HTC Vive offers, viewers can watch the consequences of reckless actions, eventually ending up in a jail cell surrounded by statistics of drunk driving fatalities. Coding for Vive was challenging as it‰Ûªs so new, especially as the camerawork of driving an erratic car required careful camera positioning. Most of our team was new to working in Unity as well, but we quickly adapted to the robust engine. We are most proud of how we were able to put so many unconnected elements together in under a day and to have them fit nearly seamlessly. We‰Ûªve learned how to integrate team member‰Ûªs codes and unique skills together to make one cohesive project.  We plan to continue developing it, focusing on heightening the realism of the experience and offering different levels of intoxication in the simulation.Our simulation is a first step in the intermingling of VR and Data Visualization, having the experience give weight to the data and the data influencing the experience.  ",,https://github.com/nicholascrow/JEMNCDataVisualization,,"SPAWAR, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, Best Internet of Things Hack, 1517 fund","UC San Diego, UC Berkeley",Alienware Laptop,easonychang,,,
TopTwitchText,http://sdhacks2016.devpost.com/submissions/58254-toptwitchtext,"InspirationSometimes a streamer wants the chat's opinions on whether to play one game or the other. Other times a streamer wants to know what viewers want them to do next in a game. While polling exists, this is a quicker way to get a sense of what the viewers want without calling for an explicit poll. Also, regular viewers can see what messages are dominating the chat. Kappa.What it doesUpon opening the file, you can specify which channel you wish to connect to. After connecting, you will immediately see the leaderboard for messages since you joined. You can disconnect and change channels at any time.How we built itWe used the example chatbot provided as a base and added the logic we needed for our bot.Challenges we ran intoWe spent a lot of time thinking about optimization of the algorithms we planned to use.Accomplishments that we're proud ofWe didn't actually expect to make something coming into this hackathon, so we're super excited that it is a working product :)What we learnedWe learned a lot about how Javascript works and how to weigh tradeoffs between different designs. What's next for TopTwitchTextWe want to improve on the user experience of using the bot. We also want to port this to a web app that uses Node.JS since it's currently just a static file.",https://youtu.be/ntd56P_2rnA,https://github.com/jhuang285/sdhacks_2016,,Twitch Moderation Challenge,UCSD,,jhuang285,Sokunev,,
kappapastabot,http://sdhacks2016.devpost.com/submissions/58259-kappapastabot,"kappapastabotA Twitch chat bot to send popular copy pastas when prompted with commands. Built at SD Hacks 2016.How to Use  Type [!copypasta] in Twitch chat without the brackets to have a bot output a random copypasta.  Type [!copypasta streamername] in Twitch chat to get a copypasta specific to a certain streamer.  Type [!copypasta help] in Twitch chat to get a list of streamers that are supported.CreatorsJason Baohttps://github.com/jabaoJeremiah Fanhttps://github.com/jeremiah-fan",,https://github.com/jeremiah-fan/kappapastabot,,Twitch Moderation Challenge,"UCSD, UCLA",,jeremiah-fan,jabao,,
kappapastabot,http://sdhacks2016.devpost.com/submissions/58260-kappapastabot,"kappapastabotA Twitch chat bot to send popular copy pastas when prompted with commands. Built at SD Hacks 2016.How to Use  Type [!copypasta] in Twitch chat without the brackets to have a bot output a random copypasta.  Type [!copypasta streamername] in Twitch chat to get a copypasta specific to a certain streamer.  Type [!copypasta help] in Twitch chat to get a list of streamers that are supported.CreatorsJason Baohttps://github.com/jabaoJeremiah Fanhttps://github.com/jeremiah-fan",,https://github.com/jeremiah-fan/kappapastabot,,Twitch Moderation Challenge,"UCSD, UCLA",,jabao,jeremiah-fan,,
EduBot,http://sdhacks2016.devpost.com/submissions/58280-edubot,"EduBotDecription: EduBot, the Twitch chat bot that allows you to create polls, translate sentences, look up math problems on Wolfram Alpha, and play Tic Tac Toe! Mention Trump, Hillary, or Johnson and experience a mini easter egg. Access FB/Instagram/website links through the respective commands. Say hi or hello and you will get a happy response in return. Every 5 minutes, EduBot will let you know the most frequently used words and commands.PollingWant to start a poll to see what everyone thinks about a question? With EduBot, you surely can!Type: !poll [Question ending in '?'] [AnswerChoice1] [AnswerChoice2] [AnswerChoice3] [...](Ex: !poll Who will win the presidential election? Trump Hillary Johnson)Once a poll is up and open, users can type out their answer choice in the chat to cast their vote.Type: !resultsFor the current results of the poll.Type: !killTo shut down polling for the current question.Google TranslateEver had a bot that could translate sentences for you? No? EduBot does it using Google's amazing API.Type: !translate [fromLanguage] [toLanguage] [Sentence/word to translate]Ex: !translate en fr I love Cats!Languages are named by their ""codes"", some examples are en (English), es (Spanish), and fr (French). Please visit the link below for guidance.Link: https://sites.google.com/site/tomihasa/google-language-codesWolfram AlphaEver watch a stream, talk to your friends in chat, and do your homework? With EduBot, you can do all three in one Twitch window.With the help of Wolfram Alpha's API, EduBot will help you solve your math problems, vocab questions, and physics exams with ease.Type: !wolfram [problem you want help solving]Ex: !wolfram derivative of (x^5)Social MediaObtain more information about me by using the following commands:!facebook  => Gives a link to my Facebook!instagram => Gives a link to my Instagram!website   => Gives a link to my personal websitePlay TicTacToeYou probably knew of a bot before that let you play small games, but did it let you play a full game of 3x3 Tic Tac Toe? EduBot allows this!Type: !tictactoeTo begin a new tic tac toe game. For this type of game, any type of Char can be used, not just X and O but please keep it to only two; anyone can play who is in chat.Type: !play [charToUse] [row] [col]Ex: !play X 0 0 => Places an X at the top left hand corner of the boardTo place your char at a specific row and column location. Both row and col is 0-indexed.The game will end when a player makes 3 in a row in any direction: horizontal, vertical, and both diagonals or if the game ends in a DRAW.AnnouncementsEvery 5 minutes (a minute count that is divisible by 5), EduBot will announce the top 3 most frequent words and commands used while being alive in the Twitch chat channel. This was going to be used for machine learning/AI algorithms to further interact with users, but it would've taken longer than the allotted time given for SD Hacks.DocuSignDoesn't have any functionality in this app as of right now but it is in the works. Wanted to use DocuSign for any formal agreements between Twitch chat users, most likely in the realm of tutoring services (given its name of EduBot), which I wanted to implement.Easter EggsMention Trump, Hillary, or Johnson and receive a popular quote that was said by them during this election season.Say hi or hello to EduBot and you'll receive a friendly ""Hey there!"" back. Nothing wrong with being nice. :)DevelopersLucas MarzoccoAPIs UsedGoogle Translate, Wolfram Alpha, Twitch ChatLast updated: 10/2/2016 3:38 AM",,https://github.com/lucasmarzocco/EduBot,,"Hack that Best Connects Us, Twitch Moderation Challenge",UCSD,,lucasmarzocco,,,
Phouse,http://sdhacks2016.devpost.com/submissions/58298-phouse,"Inspiration3Dconnexion SpaceMouse Pro Wireless - 3D mouse, but who wants to pay 300 dollars for such a mouse? Phouse (Phone mouse) is a lightweight alternative that gives users a unique mousing experience for free.What it doesThe phouse connects to a computer over Wi-Fi as a mouse. What separates this from many of the other Android mouses currently out there is the usage of the accelerometer integrated into Android devices as a form of mouse movement. This offers advantages over normal mouses and track pads by allowing for intuitive movement, not requiring a cable or adapter, and not requiring table space. It also provides clicking functionality and has potential to include keyboard inputs in the future. This hack also includes a 3D printed mount for the phone to give the user the same usability as expensive options such as the SpaceMouse.How I built itProgrammed in Android Studio, Eclipse, and a smartphone. Mount modeled in Autodesk Inventor Pro, 3D printed on a Fusion 3 using the Simplify3D slicerChallenges I ran intoSetting up the sockets/server/client caused a couple issues, especially since I ended up making it mostly a one-way connection. Furthermore, the use of a 3D printer made it difficult to allow the mount's ball joint to have free, accurate movement.Accomplishments that I'm proud ofIt's a pretty cool idea and really the first time I have used Android applications for anything beyond a really basic app.What I learnedFor me, it was an exploration into the realm of User Experience and Human-Computer Interaction. I definitely had a lot of fun implementing it and picked up some practical Android/Java knowledge at the same time.What's next for PhousePhouse could benefit from more features such as keyboard macros/mappings and additional screens. Also, the implementation of secondary sensors, mouse acceleration, and a high-pass filter could allow for smoother and more accurate movement.",https://www.youtube.com/watch?v=5hvhr26a_fo,https://github.com/ThisChessPlayer/Phouse,https://s3.amazonaws.com/challengepost/zip_files/production/19900/zip_files/phouseSubmission.zip,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, Best Internet of Things Hack, 1517 fund",University of California: San Diego,,ThisChessPlayer,trevenmoore,,
Fit Head,http://sdhacks2016.devpost.com/submissions/58300-fit-head,"Download HereDownload the zip file here:https://drive.google.com/open?id=0Bxwkswrb4FGAYlhraFlyejU2NzQInspirationMany virtual reality games of today are controlled using limiting control schemes which only allow players to walk around or teleport using the controllers. The goal of our game was to implement a virtual reality game which would require full body movement. The result was a very entertaining fitness/score chaser game which requires full participation and immersion from the player. What it doesIt is a fitness game where you dodge incoming blocks in a virtual reality space using an HTC Vive. How we built itWe built this game using an HTC Vive and the Unity game engine. Challenges we ran intoThe biggest challenge we ran into was depicting the blocks moving at the player in such a way that anyone could perceive its motion easily. Many early testers said that they thought the blocks were directly chasing them or that they couldn't tell how close the blocks were. As such we made it so the blocks changed from green to red as they came closer. Accomplishments that we're proud ofWe are proud of creating a unique virtual reality experience which stands out greatly from other VR games due to its extensive movement controls.What we learnedWe learned how to use an HTC Vive in game development. We also sharpened our skills with co-routines in Unity. What's next for Fit HeadMore game modes, features, and a full release. We could also potentially theme our game into a specific training simulator such as for Navy aircraft carrier safety. ",https://www.youtube.com/watch?v=3NAJlBvXESc,,,SPAWAR,"University of California, Riverside",,rhale002,ksiu002,crodr027,ExtraCrispy
Megadeath Freedom Falcon Fighter III,http://sdhacks2016.devpost.com/submissions/58302-megadeath-freedom-falcon-fighter-iii,"InspirationWe all wanted to work with VR and we thought that this would be a great application for education via VR.What it doesThe user sits down in an airplane cockpit and they can point at any button/lever/dial etc. and find out what it is. They also can undertake a tutorial in which they learn how to start the plane.How I built itUses Unity and HTC Vive.Challenges I ran intoGetting the switches to pivot properly. Pivots were organized on the wrong edge when we downloaded our open source cockpit. Thanks Obama.Making the text stable. One of the hardest parts of our project were getting the user to read the text while simultaneously touching the controls.Accomplishments that I'm proud ofThis was all of our first times doing VR with Unity, so we are proud to we were able to finish a complete application. Thanks Obama.What I learnedWe learned a lot about game development and VR game design. I also learnt C# and basic game engine structure to achieve concurrent processes and rendering.What's next for MegaDeath Freedom Falcon Fighter IIIWe are thinking about implementing an interactive tutorial that lights up the buttons needed to press in order to start a plane liftoff sequence.",,https://github.com/Sachte/SDHacks.git,,SPAWAR,"UCSD, UC Berkeley",Samsung Gear VR,Sachte,harryho,winnielinnie,
StadiumBot,http://sdhacks2016.devpost.com/submissions/58303-stadiumbot,"InspirationWe wanted to create content for twitch chat that was interactive and user centric, and we thought the best way to do this would be to create a chat bot that directly interacts with members of the chat. We also wanted to emulate the atmosphere of large sporting events through our bot. Twitch streams are often E-Sport streams, and all sports deserve a little hype and crowd ineteraction! StadiumBot sets out to create a fun stadium-like environment right in the streamer's chat.What it doesStadiumBot listens and responds to chatters. It provides them with various stadium-like activities such as ordering food, performing a wave, and even being featured on a kiss-cam! This turns an ordinary stream into a chaotic arena of fans.How we built itWe build StadiumBot using node.js and a third party twitch chat API called tmi.js.Challenges we ran intoOur biggest challenge was coming up with an idea for the hackathon. Eventually, we settled on StadiumBot because it was feasible, lighthearted, and would ultimately make the twitch environment more exciting.Accomplishments that we're proud ofWe are proud of having a finished project!What we learnedWe learned a lot about the twitch platform and how chat works.What's next for StadiumBotThere are a few kinks that need to be ironed out, but the possibilities for additional features that could be added to the bot are endless.",,https://github.com/streddy/twitch-stadiumbot/,,,UCSD,,streddy,,,
NLS,http://sdhacks2016.devpost.com/submissions/58310-nls,"What it doesEncrypting a message usually leads to a ciphertext that's incomprehensible and while that's not technically problematic, it looks odd with all the special characters so it'd be easily guessable that an encrypted message is being transmitted through something like an email.NLS receives the ciphertext and outputs a natural languge text contains enough information to reconstruct the ciphertext.This way, a message has been securely encrypted (our particular implementation is AES-128) since it has a natural look, it won't be obvious that one is transmitting an encrypted message.How I built itNLS is composed of four pieces:1) Data:We used a previously downloaded English Wikipedia as base and after cleaning it up, Partially parsed it until sentences. We also had/generated a list of frequently used whole words accompanied by letters that come at the start of words or sentences.2) Lower level encrypting:For encryption we used PyCrypto to implement AES-128, ECB with block size 16 bytes.3) Numerical:We changed the base of the ciphertext (by default to 10, but can be any other base upto 26). Made a new number system to represent digits with letters of the alphabet in way to match our letter data. So eventually a ciphertext would be changed into a decimal number whose digits are the most 10 used sentence-generating/word-creating letters of the alphabet. 4) Text generation:We used our Wikipedia date to train a hidden Markov model to generate texts. Specifically, such a text must have sentences whose starting letters are consecutively the letters of our base-changed ciphertext (derived in step (3)).These steps would be reversed for decoding/decryption.Challenges I ran into1) Data-wrangling. Converting a 15G text file to another and parse it to get sentences is not pretty.2) Some weird programming problems e.g. having a defective clipboard buffer on my system that changed ""some"" texts when I pasted them, buy read it fine when I put them in a text file and read the fild instead!3) In order to prevent from having the model to learn everything, every time it's executed, we needed to export the settings. The exporting functionality of the markov library we used was both slow, required too much memory and it didn't have the form we needed. So instead of using it, we wrote the dynamic object to a binary file on the hard drive and then just reread it whenever we needed it which turned out to be faster.4) We tried to do a recurrent neural net at first, but it was simply much slower than markov for it produce anything that's comparably more natural-looking.What I learnedFirst time dealing with data wrangling, markov models and neural nets, messing around with memory in Python etc. What's next for NLSI'll publish it as open-source in the next couple of days. It has some bugs when one directly changes the threshold of allowable letters and their word production frequency that I should fix later. Encryption implementation is not ideal. It doesn't hurt for its interface to pretty, either!",,,,"HackHarassment Swag Bag, SparkPost, Hack that Best Connects Us","University of California, Santa Barbara",,aalireza,pourdavood47,,
Pebblim,http://sdhacks2016.devpost.com/submissions/58322-pebblim,"PebblimAn activity app for the Pebble Time Smartwatch. Using walking-steps, can gain increase the level of your Pebblim. Features custom drawn images and and special animation algorithms for the app. Faced interesting challenges when developing for a platform which is so restrictive on processing power and memory. Come check out our awesome 3D printed model of our very own Pebblim as well!Also, we are very excited to announce our new Domain.com provided domain name for the future landing page of our wonderful application!DomainDotComIsRad.com""Domain dot com is rad dot com"" -- Thanks Domain!!",,https://github.com/stevoleeto/SD_HACKS_2016,https://s3.amazonaws.com/challengepost/zip_files/production/19907/zip_files/SD_HACKS_2016.zip,Domain.com Swag Bags,"UCSD, UCSD, UCSD, Palomar Community College","Pebble,Pebble Time",Stephen_Gilardi,savichad,,
Swift Shift,http://sdhacks2016.devpost.com/submissions/58327-swift-shift,"InspirationFriends and family working non-constant, shift jobsWhat it doesHelps with scheduling via a mobile and web app for both employees and employers (i.e. manager)How I built itJava/Android for mobile with HTML/CSS + JS and Node.js for webChallenges I ran intoUsing Java client for Docusign, Node.js client turned out to be easierAccomplishments that I'm proud ofgetting a massive amount of work/code done by myselfWhat I learnedsmall things can take a while to identify and fix, you have to be able to move on from task to task quicklyWhat's next for Swift ShiftiOS app too, more features for both mobile apps...",,,,"DocuSign, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, 1517 fund, 1517 fund",diablo valley college,,DhanushP,,,
KappaArt,http://sdhacks2016.devpost.com/submissions/58400-kappaart,"KappaArtSDHacks 2016 SubmissionBy: Danny Diep, John Li, Michaella Sheng, David ZhangThe greatest thing about twitch is streamer to viewer interaction.KappaArt is a Twitch chat bot that encourages users to create art through contests and streamer connection. It serves to provide a way for chat to have fun creating anything from handdrawn fanart, to a photoshopped meme based on a specified topic of choice. KappaArt bot will give a certain amount of time foreach contest, specifying the rules ahead of time and then allowing for users to draw, paint, or sketch and submit their art for the moderators and further chat voting.  How does it work?The bot will hold contests and store all user submissions through parsed imgur links. Depending on the style and preference of the streamer, either they themselves or a moderator can decide what topics they would like tohave for the contestant if any. They will then set a length of time to allow chat time to create and begin the contest. Users will be able to upload theirartwork on imgur. The bot will take all posted links in chat and store them in a secure hash table until the contest is over. Afterwards mods will be able to accessthe list of users and their drawings and filter or remove any inappropriate or offensive content. From there they can crown a user the KappaArtist of the stream.Required SoftwaremIRCInstructionsNavigate to your mIRC directory.Copy the contents of the ucart folder into the mIRC folder.Run mIRC, and connect to the server. Enter a channel name with #username. This channel name should match your twitch bot account.Join that channel to begin typing commands and comments under that channel.CommandsContest!timerset Sets the contest duration in seconds.!startcontestStarts the contest with the given parameters.!stopcontestStops the current contest.!announcewinner Announces the winner of the contest for the given person's id.Topics!createtopiclistCreates a new list of topics from the external text file.!listtopicsList all topics.!selecttopic Select a topic based on the id.!selectrandomtopicSelects a random topic from the list.Contestant Data!saveSaves recent contestant data into the a text file.!loadLoads the data saved from the text file into a hash table.!resetResets the hash table that stores all the recent contest information. Use only if you want to start a new contest or if something is wrong with saving, loading, or getting contestant information.!getinfoGrabs all pooled information from a recent contest.",,https://github.com/dzhan008/sdhacks2016,,,UC Riverside and UC San Diego,,MichaellaSheng,dzhan008,ddiep003,johnli1101
SD Queue,http://sdhacks2016.devpost.com/submissions/58407-sd-queue,"InspirationLines are the worst.What it doesHow I built itChallenges I ran intoAccomplishments that I'm proud ofWhat I learnedWhat's next for SD Queue",,,,"Most Entrepreneurially Promising Hack, 1517 fund","UCSD, UCSC",,shuaizhu2,,,
Thin Air,http://sdhacks2016.devpost.com/submissions/58408-thin-air,"InspirationThey say music is the universal language. That point hit me recently, when I saw a video about a small, poor village that was built on top of a landfill. The children of the village barely had enough to live on, let alone have instruments to play. Yet, through the ingenuity of the villagers, they made lemons out of lemonade and created functional musical instruments from trash, and in time they managed to create an orchestra with these instruments. Upon seeing this, my first thought was to how they could create the larger instruments, xylophones and drums and the like. Entering SD hacks, an easier solution came to my mind, although instruments are hard to come by and unlikely to be donated, donated smart phones could be used to create these instruments, seemingly out of thin air.What it doesThin air uses augmented reality targets that are tracked by a smart phone to simulate instruments on paper, yet maintaining some of the tactile feel of the real thing.How I built itWe used Unity and the augmented reality library Vuforia to track the image targets in real world space, and placed tracking markers on the mallets to know which notes are being struck.Challenges I ran intoWe had trouble initially with getting smaller objects (i.e. the mallets) to be tracked by the phone.Accomplishments that I'm proud ofDoing something this cool with just an iPhone camera and paper.What I learnedAugmented reality targets can be very fickle, and things such as the lighting of your station become essential. Also, you are limited by the hardware available.What's next for Thin AirImproving vision tracking and range and adding more instrument options.",,,,"Domain.com Swag Bags, Hack that Best Connects Us, Most Entrepreneurially Promising Hack, 1517 fund, 1517 fund","UC San Diego, UC Berkley",,ThunderBagel,mathfan11235,,
Easy Flight,http://sdhacks2016.devpost.com/submissions/58423-easy-flight,"InspirationHeading to the airport in an unfamiliar territory can be daunting, so we decided to devise a solution that would help make that trip much easier!What it doesAssists people with planning their trip to their airport by taking consideration of traffic, screening time, and departure times in a friendly way!How we built itWe built it on the foundations of Docker and hosted it on Heroku. It employs Facebook's Messenger as the sole platform for interacting with the user and uses Ruby on Rails on the backend make it powerful.Challenges we ran intoHosting providers having inconsistent network quality resulted to a slow performance to the user. Ruby on Rails was an interesting framework as we quickly ran into issues with implementation and integration with APIs. Accomplishments that we're proud ofWe were able to design an app that was different in that it focused more on what the user was used to and made it more powerful. What we learnedChoosing the right framework is important as that will guide most of the project and the having the right developer's tools allows for developers to focus on development and not on setting up!What's next for Easy FlightMake it more human friendly!",,https://github.com/SDFlyHacks/EasyFlight,,,"UC San Diego, UC Berkeley",,kevinlee12,masudr,,
QuibbleMail,http://sdhacks2016.devpost.com/submissions/58424-quibblemail,"What it doesQuibbleMail lets you play games with your friends through your email!!How to play a Game of Tic Tac ToeSimply send an email to yo@yo.quibblemail.com sayingStart tick tac toe Then the player you challanged will get an email with a copy of the board, simply reply with where you want to moveex. Top right, bottom left, center, center rightHow to play a Game of ChessSimply send an email to yo@yo.quibblemail.com sayingStart chess The challanged player will get an email with the board, reply to the email with the location of the piece you want to move and where you want to move it.Ex. A3 to A4How we built itWe hooked up sparkpost to firebase and then have a node server grabbing live emails from firebase, processing them and then modifying the game state on firebase and sending out the game boardChallenges we ran intoWe ran into some challenges setting up the DNS of our domain but with enough time we figured it out.Accomplishments that we're proud ofManaging to create exactly what we imagined in just 48 hours.What's next for QuibbleMailIn the future we will continue to develop QuibbleMail and add more game modes and features to connect people all over the world.",,https://github.com/ksbdude/SDHacks,,"SparkPost, Domain.com Swag Bags, Hack that Best Connects Us","Irvine Valley Collage, USC",,ksbdude,jzeiders,,
Eventum,http://sdhacks2016.devpost.com/submissions/58432-eventum,"InspirationWhat it doesnfcHow we built itChallenges we ran intoAccomplishments that we're proud ofWhat we learnedWhat's next for Eventum",,https://eventum-sdhacks.herokuapp.com/,,"SparkPost, DocuSign, Hack that Best Connects Us","University of California, San Diego",,pramukhg,Bog5454,,
Trivents (3vents),http://sdhacks2016.devpost.com/submissions/58457-trivents-3vents,"Inspirationto be doneWhat it doesHow we built itChallenges we ran intoAccomplishments that we're proud ofWhat we learnedWhat's next for Trivents (3vents)",,,,,"UCSD, UCLA",,AndrewGeorgeGit,arkingupta,AhanM,
A Way from Home,http://sdhacks2016.devpost.com/submissions/58458-a-way-from-home,"A Way from HomeThis is an application created for the DocuSign API challenge for SDHacks - the annual hackathon of University of California, San Diego. This project is a web/mobile application written in Javascript using the popular framework Node.js, Express.js, while using MongoDB for database requirements.Credits  DocuSign  SDHacks  Major League Hacking  Node.js",,https://github.com/agustinbalquin/A-way-from-home,,"DocuSign, Hack that Best Connects Us",University of California Riverside,,agustinbalquin,,,
Let Git Go,http://sdhacks2016.devpost.com/submissions/58473-let-git-go,"I am not done yet but submitting early just in case. I will continue to edit the website until 10:00.InspirationI thought about what technologies will help connect people around the world and decided to tackle the difficulty for regular repositories to get noticed. So I decided to build something not only makes it easier to find people who shared similar skills and technologies without realizing and find the less-popular repositories (which are relevant), but also something that can help developers to get accustomed to the idiomatic and best practices of development so that the general quality of repositories will increase. One of the obstacles to use open source projects for me is that there aren't always clear APIs or examples. To connect components of several different projects can be tricky, if you are not very familiar with all the idioms and best practices. I wanted to build a program that makes it easier to look up projects that import a certain set of other repositories, and people who are using a certain set of technologies. I also wanted to build a idea sophistication & collaboration tool so that, once one get sa good idea of how people put different libraries together and who to collaborate with, one can go ahead and utilize the knowledge one just learned. Using this technology enables you to see repositories you would never have seen otherwise, and get to know people you would have had hard time finding.What it doessearch open source projects that import all of given repositories and search open source developers who have experience using all of given repositories (not necessarily in a single project, but throughout her open source career)Provide search functions through API (/search through GET, /intersectRepo and /intersectHuman through POST)Use the search query to build a collaboration space where you can design a project which utilizes as much open source projects as possible and no one has ever built. (not implemented yet)Sends updates about who contributed to your collaboration space (by deciding to add, replace, or delete a project to/from a page) (not implemented yet)How I built itI started building from https://github.com/go-bootstrap/go-bootstrap, which helped me connect different technologies seamlessly. Golang also has a nice feature where the source code itself includes the exact address to the repositories they are importing, so it was possible to narrow down repositories by the projects they are using. Challenges I ran intoI wasn't familiar with Javascript, especially the scope of variables in Javascript. It took a long time to fix one of the most trivial bugs I've ever had.Accomplishments that I'm proud ofI was able to implement much more features than I could a year ago, in HACKUCI.What I learnedI learned about various open source projects that I used, or considered using, in my project. I learned the importance of concise, maintainable and usable APIs, and hope to be able to utilize it in the future.What's next for Let Git GoIf I could, I want to extend the application outside of the scope of Golang.",,https://www.letgitgo.com/,,"SparkPost, Domain.com Swag Bags, Hack that Best Connects Us","university of california, irvine",,jpatrickpark,,,
Lecture.io,http://sdhacks2016.devpost.com/submissions/58474-lecture-io,"InspirationIn UCSD iClickers are a necessity for some classes but iClickers cost around $60 and being a piece of harware, are easy to lose or misplace. We decided that there was a reason to improve and innovate in this area and What it doesWe built a replacement for iClickers that expands and improves upon the idea. Like iClickers it allows professors to create questions and get responses to those questions but it also has the capability to store the actual question text, should a professor input it. With that information, it not only becomes a tool for classroom participation but also for out of class studying as students can look back in their history and review previous clicker questions.How we built itIt was built with a front end of swift for the iOS app and a front of HTML/CSS/JS for the web portion. It's a combination of Web and iOS requiring a third party server and database. The back end server is written in Node with express as the framework and mongoDB for the database.Challenges we ran intoSome challenges we ran into were mongoDB database handling because none of us were too familiar with mongoDB so learning node's mongoose package and understanding how it's schema system worked with the actual JSONs that were stored in the database took a while. Additionallly, creating a workable and intuitive UI took a significant portion of our time as well because of the sheer amount of design decisions that went into the overall project.Accomplishments that we're proud ofWe managed to integrate an iOS app seamlessly with a third party Node server and that was really powerful because that means we can now use the same API we built for iOS processing for other device specific processing as well. Additionally, on the iOS side, we are very satisfied with the visual appeal and simplicity of the app. What we learnedWe learned, on a technical level, how to work with mongoDB and Node and create a multiplatform API for database handling. On the mobile side, we learned how to properly post JSON via http requests written in Swift.  What's next for Lecture.ioTake it to Android! Provide a professor facing mobile app. Finish the click history study tools. There's a lot to be done and if you decide to help us, we can make it happen!",,https://sdhack16.herokuapp.com/,,"Most Entrepreneurially Promising Hack, 1517 fund, 1517 fund",UCSD,,nmauskar,bennorthn,kesongxie,
budgetme,http://sdhacks2016.devpost.com/submissions/58478-budgetme,"InspirationWe develop things that we feel are lacking in our lives. Most budget apps require you to fulfill unnecessary requirements and is a hassle to fill out. Thus, we wanted to create an app that would make budgeting simple for the user.What it doesOur app takes the user's income, along with their budget and spendings in order to calculate their savings. In addition, they are able to input their ideal savings amount/goal and check if they attained this amount or not.How we built itWe used Python, Javascript, HTML 5, CSS 3, and a facial recognition API to build the app.Challenges we ran intoWe had a hard time making the facial recognition feature appear on our sign in page. We integrated a design library that we had no prior experience with, so we had to learn how to interpret the code to style our application. Also, we had a hard time with the layout of the web application. Shoutout to Nick for helping us figure out facial recognition!Accomplishments that we're proud ofWe are mainly proud of the fact that we got the facial recognition to work before the user is able to sign into their email account. As first time hackers, we had no experience with new technologies (such as virtual reality, dragonboard, and of course, facial recognition) and the fact that we accomplished this under 36 hours is quite an accomplishment.What we learnedWe learned that although a task may seem daunting at first, it becomes a lot more manageable after distributing the work among teammates. We also realized that it's important to develop incrementally in order to make sure that we know exactly what happens when we change lines of code.What's next for budgetmeWe want to be able to amp up the facial recognition feature so that it recognizes the faces of certain individuals.",,https://budgetme-145110.appspot.com/,,,"UCLA, UCI, UCSD, UCR",,hsykwon,Amy-Yee,tsandytsan,
RoboPi,http://sdhacks2016.devpost.com/submissions/58482-robopi,"InspirationAmazon Echo offers an amazing Smart Home experience but must remain stationary and limited range. RoboPi offers the same smart home features of the Echo but boasts a much better range. RoboPi is your loyal companion, following you wherever you may go, ready to help make your home more more versatile, more comfortable. Though RoboPi may appear humble, the awesome little machine offers us a glimpse of a smarter and more awesome future.What it doesRoboPi uses OpenCV to track its master. RoboPi sees and hears using a Logitech cam-corder and serves as a loyal assistant following users around the house in order to listen to Echo Commands.How we built itRoboPi is built on Raspberry Pi 3 and is enabled with a logitech webcam, a microphone, and motors. OpenCV allows RoboPi to lock onto people and follow them in order to maintain a audio range. RoboPi is equipped with Amazon Alexa and is very capable of responding to various voice commands.Challenges we ran intoThe two primary challenges of the project were implementing object tracking and also implementing Alexa. Luckily both OpenCV and Alexa have Python implementations which somewhat streamlined the build process. Calorimetric recognition required some optimization as did RoboPi's self-adjusting features, but were ultimately relatively painless to configure. The basic functionality of the Alexa API was not terribly difficult to implement, but custom Alexa Commands were rather complicated and laborious. Ultimately, we decided that further commands could be implemented in V.2.Accomplishments that we're proud ofRoboPi is a complete package with a clear purpose. He is awesome at doing is job and works very smoothly. There were a lot of moving parts in this project but ultimately the project ran smoothly. It was really powerful to know that we were able to interface all aspects of the project from the digital circuitry to the microprocessor to AWS services in our final productWhat we learnedWe had the opportunity to work with a new API, Alexa, and a new micoprocessor, Dragon410c. There was a lot of setup during the hackathon, but all work was very much worth itWhat's next for RoboPiMore commands! More functions! For the next iteration of RoboPi we would like to add a full suite of custom commands which would let us make RoboPi a truly useful IOT assistant. The ability to both observe and control any smart tech in a household is tremendous.",,https://github.com/xamgeis/RoboPi/tree/master,https://s3.amazonaws.com/challengepost/zip_files/production/19913/zip_files/RoboPi.tar.zip,"Best Use of DragonBoard, General Atomics, Best Internet of Things Hack","University of California, San Diego",Dell Monitor,YiDingFang,xamgeis,,
Buddy Download,http://sdhacks2016.devpost.com/submissions/58483-buddy-download,"InspirationSlow internet connection is frustrating. I was thinking of a way to tackle this.What it doesWhen you try to download a file. It sends a request to a server. Others devices keeping polling the server to check if there is a download request. The server partitions the file based on the internet speed these devices have and each device downloads its share.TODOAssuming that these devices come in same LAN frequently, user can instruct the application to send the file to the designated user where it will be merged.How I built itI built a Jetty server and made REST APIs so that devices can communicate with it. A device hits an API for informing the server of the URL. Server maintains a queue of such requests. Then each device informs the server of the quality of its internet connection and then server partitions the file based on this info. After each device downloads its share, it notifies the server and when all are done the request is ejected. Challenges I ran intoCommunication between client and server. I switched from sockets to polling for some part to get to a working solution.Accomplishments that I'm proud ofBuilding all these things were challenging and fun. I was able to reach the point where each device downloads its share of file. That is far ahead of what I though I'll reach.What I learnedHow to manipulate the code to synchronize actions. Establishing a system of multiple clients and a server and their communication.What's next for Buddy DownloadFirst, I'll finish it to the point I thought. Since apps have a push notification system, communication among clients and server will be much easier and convenient for the user. So, an app for it would be awesome!!",,https://github.com/gmridul/SDHack16,,Most Entrepreneurially Promising Hack,UCSD,,gmridul,,,
VR-Fight!,http://sdhacks2016.devpost.com/submissions/58486-vr-fight,"InspirationA classic throwback to the old gem Punch-Out, we aimed to combine this nostalgia of punching and being punched by the opponent with the immersive possibilities of VR. But ordinary VR is so last month, we wanted to make it Real.What it doesUses arduino circuit and HTC Vive (with Unity code) to provide a user experience never before seen. Essentially, fight against an opponent where you can parry or dodge to defend and swipe at the opponent to attack. When the opponent hits you in, for example on your left side, you feel a vibration there.How we built itIdeally we would have liked to use tiny vibration motors placed all over a jacket to provide precise and powerful vibrations all over, but we only had access to stepper motors. So we wrote random values to the stepper pins to make it behave like a vibration motor - as hacky a solution as we could come up with!We then used unity to build basic spherical ""boxing gloves"" that simulated the opponent and slowly built the design up from there - eventually creating a Julius Caesar sword-fighting game in the middle of a forest!Challenges we ran intoSetup. Unity was a rather large hurdle to overcome as a framework, especially the design. Also, audio sources were difficult to deal with, as it seemed to have been decreasing our runtime and affecting the gameplay. We also had a pre-existing model of a boxer that would've been really cool to use, but animations were very difficult to handle with that model. Getting the steppers to behave as vibration motors was also tricky.Accomplishments that we're proud ofGetting all of it to work! Fighting with a Caesar we made was an extremely rewarding experience! And the haptic feedback on the body and through the controllers definitely add to the experience.nWhat we learnedUnity. VR. ViveWhat's next for VR-Fight!VR-Fight is a small-scale proof of concept of a much larger idea - integrating real life experiences into VR Games. For example when its windy, a fan turns on so you actually feel windy. Water can be sprayed on you when it rains in the game. VR-Fight was the simplest version of this idea we could make with the tools available to us at the hackathon and in this time-frame.",https://www.youtube.com/watch?v=D4N5TiSzkVs,https://github.com/HaarisKhan/VR-Fight,,,UC Berkeley,Arduino 101,P1N_Team,raghav98,,
Homcook,http://sdhacks2016.devpost.com/submissions/58493-homcook,"InspirationBeing college students away from home and wanting something more than cafeteria foods.What it doesHomcook brings people who want a home-cooked meal and people who cook extra portions together. Whether it be a pick up, delivery, or a dine in, Homcook will help you set it up. How we built itWe built the app on android studio and used Firebase to support the backend. Challenges we ran intoBeing new to android studio we mainly ran into errors around outdated API versions and  Accomplishments that we're proud ofLearning how to use android studio and collaborating with a newly found team.What we learnedWe learned how to use android studio and how to use Firebase.What's next for HomcookWe hope to fulfill our mission of bringing together food lovers. ",,https://github.com/jabumeri/Homcook,https://s3.amazonaws.com/challengepost/zip_files/production/19914/zip_files/MainActivity.java,"DocuSign, Hack that Best Connects Us, Most Entrepreneurially Promising Hack","Cal Poly Pomona, UC Irvine, Cal State Fullerton",,tchaw,Elopezsolis,arodd94,jabumeri
Cooking With Alexa,http://sdhacks2016.devpost.com/submissions/58510-cooking-with-alexa,"InspirationOften times when cooking we run into the problem of getting our laptops or phones dirty pulling up the recipe to check the directions. This can be incredibly harmful to our devices but often a required risk if we want to ensure our food comes out properly. What it doesAllows the user to upload a recipe from allrecipes.com and have Alexa read the ingredients and directions with ease!How we built itUsing Amazon Developer for Alexa running node.js on a heroku server with a ruby on rails web interface. Challenges we ran intoHaving incredibly limited Ruby experience, and no experience in Rails greatly limited efficiency of production. There was computer error too which prevented the further development of the program which would take in user input. Figuring out how to program custom functions onto Alexa was a challenge as Amazon does not have much documentation outside of their AWS lambda functions. Wanting to use something we were more familiar with, like node.js, made our project a bit harder to get started but easier in the long run.Accomplishments that we're proud ofGetting Alexa to talk with us! Also figuring out node.js and heroku despite having minimal prior experience with the two. What we learnedRuby/Rails, Node.js, heroku, Alexa DevelopmentWhat's next for Cooking With AlexaImplementing the Ruby functionality in order to receive user input. Finishing up the commands to make them less buggy (Saying 'Degrees F' instead of Degrees Fahrenheit, not being able to understand non-seeded ingredient names, etc.)",,https://github.com/HalcyonAura/CookingWithAlexa,,"1 TB Hard Drives, Domain.com Swag Bags, Best Internet of Things Hack",Arizona State University,Amazon Echo,claplace,Giansar,,
The information of myself the Website!,http://sdhacks2016.devpost.com/submissions/58517-the-information-of-myself-the-website,"Home PageMy personal home page source code",,https://github.com/youhusky/youhusky.github.io,,Domain.com Swag Bags,University of Southern California,,youhusky,,,
Scriply,http://sdhacks2016.devpost.com/submissions/58520-scriply,"Keeping track of meds is hard. In the U.S., there is a markedly low adherence to refilling and taking prescriptions; in fact, nearly 50% of people taking a chronic medication stop taking it within the first year, with the biggest drop-off occurring in the first month. Additionally, prescription drugs are highly susceptible to abuse by non-prescribed users who have access to the medication, with 52 million people reporting that they have used prescription drugs for nonmedical reasons at least once in their lifetimes. Finally, many people manage prescriptions for others, namely elderly people and people with impaired memory. Ensuring that the other person has taken the correct dosage every day can be a major challenge.Scriply is combatting the biggest issues related to prescription drugs by allowing users full insight and control over their prescription regimens through an intuitive app and multi-user dispenser.How it worksThe Scriply app allows its user to set the weekly medication regimen for themselves and any other individuals in their care. Based on this information, the dispenser will combine and release the formulation of pills that individuals needs on demand. Data on dispenses is then sent to the app for the user to be able to monitor activity.The system is designed to make prescription management seamless and intuitive by integrating additional features such as optional reminders, notifications when prescriptions need to be refilled, and the ability to order prescription refills in-app.This competes with similar products on the market because current offerings require users to physically input every drug combination for every dispense, can't dispense liquid medication, don't allow for activity monitoring, only serve one individual per machine, don't allow for freedom in reminders, and, quite frankly, aren't very visually appealing. Scriply addresses all of these issues, and does so on a clean, user-friendly interface.How we built itUnderstanding that managing prescriptions is nobody's favorite pastime, Scriply's system was designed to require as few interactions as possible while relaying an extremely high level of actionable information to the user. Accordingly, we designed our iOS app to be straightforward, bright, and intuitive. This app connects directly to the dispenser, and can prompt the dispenser to release any combination of pills on demand.The dispenser can release two types of medication: pills and liquid medicine. It functions by rotating juxtaposed disks that select and accept a single serving of meds and dispenses them down a shoot. The majority of its components were 3D printed using CAD. Our team built the underlying mechanics on Arduino and subsequently developed a platform to connect the Arduino system to a Node.js server.Challenges we ran intoThe biggest technical challenge that we faced was that the 3D printing process took longer than we had anticipated, which caused us to have to readjust our design schedule on multiple occasions. The team concluded that had the designs been more space-efficient, much printing time could have been saved.A second major challenge arose from developing the app's logic. Because prescription drug management conflates an array of different factors, our team put much more time than we had expected we would into theorizing on the different scenarios and possible troubleshooting issues that might arise for the user, and continuously found ourselves confronted with holes in the experience that needed to be patched up.Accomplishments that we're proud ofOverall, our team managed to create a viable proof of concept for a product that could facilitate the lives of many individuals who deal with difficulties related to prescription drugs. The system integrated both software and hardware to perform a task that is relatively nuanced for what can be built in 36 hours, and the team learned much in doing so.What we learnedThe multi-faceted nature of this project allowed our team to gain exposure to a wide range of problem-solving opportunities. Firstly, this project was an exercise in teamwork wherein every member of our team was made to contribute their expertise to an overarching concept. This meant that we had to harmonize our skillsets and abilities, and determine how any lapses in knowledge would be addressed‰ÛÒ sometimes this meant having to rapidly learn a new technical skill, and others it meant overcoming a fear of talking to strangers. Secondly, this project was this team's first full immersion into design thinking. We attempted to address every problem we encountered with a user-centric answer, employing our sense of empathy with the end user. Finally, we were able to garner a deeper sense of issues related to prescription medication use. These issues aren't very visible in society, but many individuals struggle with at least one of the problems that we identified, and we believe that were made much more cognizant for it.What's next for ScriplyDue to the time constraint, the app and dispenser were built to the point of proof of concept, but not to their full functionality. As we Scriply moves forward, we are aiming to build out the app's back-end to meet its current front-end framework, incorporating a prescription database for users to have a menu of drugs to choose from and embedding the prescription refill feature, as well as refine the dispenser's physical design to be more aesthetically appealing to match the user experience on the app.Personally, we will continue to further our awareness into issues stemming from prescription medications and seek out innovative and integrated solutions.",,,,"Hack that Best Connects Us, Most Entrepreneurially Promising Hack, General Atomics, Best Internet of Things Hack, 1517 fund, 1517 fund","UC San Diego, UC Merced, UC Santa Cruz",Arduino 101,sophievo,Jacrin,hoaithidang,chrisryanreps
PilBot,http://sdhacks2016.devpost.com/submissions/58521-pilbot,"Team Name: Sac(k)PilBot: Your Daily Dose====================## InspirationWe wanted to connect top gaming news directly to the relevant game to enhance the Twitch.tv experience. We also wanted to make a fun Twitch.tv chat bot.## What it doesOur twitch chat bot broadcasts hot, relevant topics from sub-Reddit of the game that the streamer is playing.## How we built itPython and determination.## Challenges we ran intoTwitch.tv blocking all of SDHacks IPs, so we could not send chat messages to channels.SDHacks internet being really slow.Learning Python syntax and connecting to the Twitch.tv socket.Learning how to use Twitch.tv's chat bot API in order to get the streamer's game and also to send and receive messages to the chat.Learning how to use PRAW (Python Reddit API Wrapper) for searching the streamer's game subreddit and getting the threads.## Accomplishments that we're proud ofWe made something that works the way its supposed to :)We also installed pip and praw.## What we learnedWe learned Python, how to connect to a socket, how to install and use APIs, how to access JSON objects, how irc works.## What's next for PilBotFun and chat interactive emoticon clouds (like word cloud, but with pictures)User chat commands (such as !poll and !songs)",,https://github.com/Leest1/TwitchBot,https://s3.amazonaws.com/challengepost/zip_files/production/19915/zip_files/PilBot.zip,Twitch Moderation Challenge,"UC Irvine, UC San Diego",,shannyonl,,,